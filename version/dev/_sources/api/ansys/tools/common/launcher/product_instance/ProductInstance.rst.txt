





:class:`ProductInstance`
========================


.. py:class:: ansys.tools.common.launcher.product_instance.ProductInstance(*, launcher: ansys.tools.common.launcher.interface.LauncherProtocol[ansys.tools.common.launcher.interface.LAUNCHER_CONFIG_T])

   Provides a wrapper for interacting with the launched product instance.

   This class allows stopping and starting of the product instance. It also
   provides access to its server URLs/channels.

   The :class:`ProductInstance` class can be used as a context manager, stopping
   the instance when exiting the context.





.. py:currentmodule:: ProductInstance

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~start`
            - Start the product instance.
          * - :py:attr:`~stop`
            - Stop the product instance.
          * - :py:attr:`~restart`
            - Stop and then start the product instance.
          * - :py:attr:`~check`
            - Check if all servers are responding to requests.
          * - :py:attr:`~wait`
            - Wait for all servers to respond.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~urls`
            - URL and port for the servers of the product instance.
          * - :py:attr:`~stopped`
            - Flag indicating if the product instance is currently stopped.
          * - :py:attr:`~channels`
            - Channels to the gRPC servers of the product instance.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__enter__`
            - Enter the context manager defined by the product instance.
          * - :py:attr:`~__exit__`
            - Stop the product instance when exiting a context manager.




Import detail
-------------

.. code-block:: python

    from ansys.tools.common.launcher.product_instance import ProductInstance

Property detail
---------------

.. py:property:: urls
   :type: dict[str, str]


   URL and port for the servers of the product instance.


.. py:property:: stopped
   :type: bool


   Flag indicating if the product instance is currently stopped.


.. py:property:: channels
   :type: dict[str, grpc.Channel]


   Channels to the gRPC servers of the product instance.





Method detail
-------------

.. py:method:: __enter__() -> ProductInstance

   Enter the context manager defined by the product instance.


.. py:method:: __exit__(*exc: Any) -> None

   Stop the product instance when exiting a context manager.


.. py:method:: start() -> None

   Start the product instance.

   Raises
   ------
   RuntimeError
       If the instance is already in the started state.
   RuntimeError
       If the URLs exposed by the started instance do not match
       the expected ones defined in the launcher's
       :attr:`.LauncherProtocol.SERVER_SPEC` attribute.


.. py:method:: stop(*, timeout: float | None = None) -> None

   Stop the product instance.

   Parameters
   ----------
   timeout :
       Time in seconds after which the instance is forcefully stopped.
       Not all launch methods implement this parameter. If the parameter
       is not implemented, it is ignored.

   Raises
   ------
   RuntimeError
       If the instance is already in the stopped state.


.. py:method:: restart(stop_timeout: float | None = None) -> None

   Stop and then start the product instance.

   Parameters
   ----------
   stop_timeout :
       Time in seconds after which the instance is forcefully stopped.
       Not all launch methods implement this parameter. If the parameter
       is not implemented, it is ignored.

   Raises
   ------
   RuntimeError
       If the instance is already in the stopped state.
   RuntimeError
       If the URLs exposed by the started instance do not match
       the expected ones defined in the launcher's
       :attr:`.LauncherProtocol.SERVER_SPEC` attribute.


.. py:method:: check(timeout: float | None = None) -> bool

   Check if all servers are responding to requests.

   Parameters
   ----------
   timeout :
       Time in seconds to wait for the servers to respond. There
       is no guarantee that the ``check()`` method returns within this time.
       Instead, this parameter is used as a hint to the launcher implementation.


.. py:method:: wait(timeout: float) -> None

   Wait for all servers to respond.

   This method repeatedly checks if the servers are running, returning as soon
   as they are all ready.

   Parameters
   ----------
   timeout :
       Wait time in seconds before raising an exception.

   Raises
   ------
   RuntimeError
       If the server still has not responded after ``timeout`` seconds.





