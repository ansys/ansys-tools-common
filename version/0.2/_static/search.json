[{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysLogicError.html#ansyslogicerror","title":"AnsysLogicError","text":"AnsysLogicError\n\n\n\nexception ansys.tools.common.exceptions.AnsysLogicError(message: str)\n\nBases: AnsysError\n\nException raised when an unexpected logical condition occurs."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysLogicError.html#parameters","title":"AnsysLogicError > Parameters","text":"Parameters\n\nmessage\n\nstr\n\nError message."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysLogicError.html#import-detail","title":"AnsysLogicError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/Mystr.html#mystr","title":"Mystr","text":"Mystr\n\n\n\nclass ansys.tools.common.versioning.Mystr\n\nBases: VersionMeta, str\n\nProvides the custom class to hold strings for versioning."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/Mystr.html#import-detail","title":"Mystr > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#the-pathpy-module","title":"The path.py module","text":"The path.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#summary","title":"The path.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_available_ansys_installations\n\nGet a dictionary of available Ansys unified installation versions with their base paths.\n\nfind_mechanical\n\nSearch for the Ansys Mechanical path in the standard installation location.\n\nfind_mapdl\n\nSearch for the Ansys MAPDL path within the standard install location.\n\nfind_dyna\n\nSearch for the Ansys LS-DYNA path within the standard install location.\n\nfind_ansys\n\nObsolete method. Use find_mapdl instead.\n\nis_valid_executable_path\n\nCheck if the executable path is valid for the product.\n\nchange_default_mapdl_path\n\nChange your default Ansys MAPDL path.\n\nchange_default_dyna_path\n\nChange your default Ansys LS-DYNA path.\n\nchange_default_mechanical_path\n\nChange your default Mechanical path.\n\nchange_default_ansys_path\n\nDeprecated. Use change_default_mapdl_path instead.\n\nsave_mechanical_path\n\nFind the Mechanical path or query the user.\n\nsave_dyna_path\n\nFind Ansys LS-DYNA’s path or query the user.\n\nsave_mapdl_path\n\nFind the Ansys MAPDL’s path or query the user.\n\nsave_ansys_path\n\nDeprecated. Use save_mapdl_path instead.\n\nclear_configuration\n\nClear the entry of the specified product in the configuration file.\n\nget_saved_application_path\n\nGet the saved path for a specific application from the configuration file.\n\nget_mapdl_path\n\nAcquires the Ansys MAPDL path.\n\nget_dyna_path\n\nAcquires the Ansys LS-DYNA path from a cached file or user input.\n\nget_ansys_path\n\nDeprecated. Use get_mapdl_path instead.\n\nget_mechanical_path\n\nAcquires the Ansys Mechanical path.\n\nversion_from_path\n\nExtract the product version from a path.\n\nget_latest_ansys_installation\n\nReturn a tuple with the latest Ansys installation version and its path.\n\nAttributes\n\n\n\n\n\nlinux_default_dirs\n\n\n\nConstants\n\n\n\n\n\nPLUGINS\n\n\n\nLOG\n\n\n\nPRODUCT_TYPE\n\n\n\nSUPPORTED_VERSIONS_TYPE\n\n\n\nLINUX_DEFAULT_DIRS\n\n\n\nCONFIG_FILE_NAME\n\n\n\nSUPPORTED_ANSYS_VERSIONS\n\n\n\nPRODUCT_EXE_INFO\n\n\n\nSETTINGS_DIR\n\n\n\nCONFIG_FILE\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#description","title":"The path.py module > Description","text":"Description\n\nModule for installation path retrieval."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#module-detail","title":"The path.py module > Module detail","text":"Module detail\n\n\n\npath.get_available_ansys_installations(supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Dict[int, str]\n\nGet a dictionary of available Ansys unified installation versions with their base paths.\n\n\n\npath.find_mechanical(version: float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearch for the Ansys Mechanical path in the standard installation location.\n\n\n\npath.find_mapdl(version: int | float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearch for the Ansys MAPDL path within the standard install location.\n\nReturns the path of the latest version.\n\n\n\npath.find_dyna(version: int | float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearch for the Ansys LS-DYNA path within the standard install location.\n\nReturns the path of the latest version.\n\n\n\npath.find_ansys(version: float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nObsolete method. Use find_mapdl instead.\n\n\n\npath.is_valid_executable_path(product: PRODUCT_TYPE, exe_loc: str) -> bool\n\nCheck if the executable path is valid for the product.\n\n\n\npath.change_default_mapdl_path(exe_loc: str) -> None\n\nChange your default Ansys MAPDL path.\n\n\n\npath.change_default_dyna_path(exe_loc: str) -> None\n\nChange your default Ansys LS-DYNA path.\n\n\n\npath.change_default_mechanical_path(exe_loc: str) -> None\n\nChange your default Mechanical path.\n\n\n\npath.change_default_ansys_path(exe_loc: str) -> None\n\nDeprecated. Use change_default_mapdl_path instead.\n\n\n\npath.save_mechanical_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind the Mechanical path or query the user.\n\n\n\npath.save_dyna_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind Ansys LS-DYNA’s path or query the user.\n\nIf no exe_loc argument is supplied, this function attempts\nto obtain the Ansys LS-DYNA executable from (and in order):\n\nThe default Ansys paths (such as 'C:/Program Files/Ansys Inc/vXXX/ansys/bin/winx64/LSDYNAXXX')\n\nThe configuration file\n\nUser input\n\nIf the exe_loc argument is supplied, this function performs some checks.\nIf successful, it writes the value for the exe_loc argument into the configuration file.\n\n\n\npath.save_mapdl_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind the Ansys MAPDL’s path or query the user.\n\nIf no exe_loc argument is supplied, this function attempts\nto obtain the Ansys MAPDL executable from (and in order):\n\nThe default Ansys paths (i.e. 'C:/Program Files/Ansys Inc/vXXX/ansys/bin/winx64/ansysXXX')\n\nThe configuration file\n\nUser input\n\nIf the exe_loc argument is supplied, this function performs some checks.\nIf successful, it writes the value for the exe_loc parameter into the configuration file.\n\n\n\npath.save_ansys_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nDeprecated. Use save_mapdl_path instead.\n\n\n\npath.clear_configuration(product: PRODUCT_TYPE | Literal['all']) -> None\n\nClear the entry of the specified product in the configuration file.\n\n\n\npath.get_saved_application_path(application: str) -> str | None\n\nGet the saved path for a specific application from the configuration file.\n\n\n\npath.get_mapdl_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires the Ansys MAPDL path.\n\nFirst, it looks in the configuration file, used by save_mapdl_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\n\n\npath.get_dyna_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires the Ansys LS-DYNA path from a cached file or user input.\n\nFirst, it looks in the configuration file, used by save_dyna_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\n\n\npath.get_ansys_path(allow_input: bool = True, version: float | None = None) -> str | None\n\nDeprecated. Use get_mapdl_path instead.\n\n\n\npath.get_mechanical_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires the Ansys Mechanical path.\n\nFirst, it looks in the configuration file, used by save_mechanical_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\n\n\npath.version_from_path(product: PRODUCT_TYPE, path: str) -> int\n\nExtract the product version from a path.\n\n\n\npath.get_latest_ansys_installation() -> Tuple[int, str]\n\nReturn a tuple with the latest Ansys installation version and its path.\n\nIf there is a student version and a regular installation for the latest release, the regular one is returned\n\n\n\npath.PLUGINS: Dict[str, ansys.tools.common.path.applications.ApplicationPlugin]\n\n\n\n\n\npath.LOG\n\n\n\n\n\npath.PRODUCT_TYPE\n\n\n\n\n\npath.SUPPORTED_VERSIONS_TYPE\n\n\n\n\n\npath.LINUX_DEFAULT_DIRS\n\n\n\n\n\npath.CONFIG_FILE_NAME = 'config.txt'\n\n\n\n\n\npath.SUPPORTED_ANSYS_VERSIONS: SUPPORTED_VERSIONS_TYPE\n\n\n\n\n\npath.PRODUCT_EXE_INFO\n\n\n\n\n\npath.SETTINGS_DIR\n\n\n\n\n\npath.CONFIG_FILE\n\n\n\n\n\npath.linux_default_dirs = [['/', 'usr', 'ansys_inc'], ['/', 'ansys_inc'], ['/', 'install', 'ansys_inc']]\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\ndict[int: str]\n\nDictionary of all Ansys unified installations paths in Windows."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#notes","title":"The path.py module > Notes","text":"Notes\n\nOn Windows, It uses the environment variable AWP_ROOTXXX.\n\nThe student versions are returned at the end of the dict and\nwith negative value for the version."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\n>>> from ansys.tools.common.path import get_available_ansys_installations\n>>> get_available_ansys_installations()\n{251: 'C:\\\\Program Files\\\\ANSYS Inc\\\\v251',\n 242: 'C:\\\\Program Files\\\\ANSYS Inc\\\\v242',\n -242: 'C:\\\\Program Files\\\\ANSYS Inc\\\\ANSYS Student\\\\v242'}\n\nReturn all installed Ansys paths in Linux.\n\n>>> get_available_ansys_installations()\n{251: '/usr/ansys_inc/v251',\n 242: '/usr/ansys_inc/v242',\n 241: '/usr/ansys_inc/v241'}"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nmechanical_path\n\nstr\n\nFull path to the executable file for the latest Mechanical version.\n\nversion\n\nfloat | str\n\nVersion in the float format. For example, 25.1 for 2025 R1.\nIf no version has be found, version is set to “”"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nOn Windows:\n\n>>> from ansys.tools.common.path import find_mechanical\n>>> find_mechanical()\n('C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe', 25.1)\n\nOn Linux:\n\n>>> find_mechanical()\n('/usr/ansys_inc/v251/aisol/.workbench', 25.1)"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nversion\n\nint, float, optional\n\nVersion of Ansys MAPDL to search for.\nIf using int, it should follow the convention XXY, where\nXX is the major version,\nand Y is the minor.\nIf using float, it should follow the convention XX.Y, where\nXX is the major version,\nand Y is the minor.\nIf None, use latest available version on the machine."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nansys_path\n\nstr\n\nFull path to ANSYS executable.\n\nversion\n\nfloat\n\nVersion float.  For example, 25.1 corresponds to 2025R1."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nWithin Windows\n\n>>> from ansys.tools.common.path import find_mapdl\n>>> find_mapdl()\n'C:/Program Files/ANSYS Inc/v251/ANSYS/bin/winx64/ansys251.exe', 25.1\n\nWithin Linux\n\n>>> find_mapdl()\n(/usr/ansys_inc/v251/ansys/bin/ansys251, 25.1)"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nversion\n\nint, float, optional\n\nVersion of Ansys LS-Dyna to search for.\nIf using int, it should follow the convention XXY, where\nXX is the major version,\nand Y is the minor.\nIf using float, it should follow the convention XX.Y, where\nXX is the major version,\nand Y is the minor.\nIf None, use latest available version on the machine."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nansys_path\n\nstr\n\nFull path to Ansys LS-Dyna executable.\n\nversion\n\nfloat\n\nVersion float.  For example, 25.1 corresponds to 2025R1."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nWithin Windows\n\n>>> from ansys.tools.common.path import find_dyna\n>>> find_dyna()\n'C:/Program Files/ANSYS Inc/v251/ANSYS/bin/winx64/LSDYNA251.exe', 25.1\n\nWithin Linux\n\n>>> find_dyna()\n(/usr/ansys_inc/v251/ansys/bin/lsdyna251, 25.1)"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nproduct\n\nPRODUCT_TYPE\n\nThe product type, either “mapdl”, “mechanical”, or “dyna”.\n\nexe_loc\n\nstr\n\nThe executable path to check."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nbool\n\nTrue if the executable path is valid for the product, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nAnsys MAPDL executable path.  Must be a full path."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nChange default Ansys MAPDL location on Linux\n\n>>> from ansys.tools.common.path import change_default_mapdl_path, get_mapdl_path\n>>> change_default_mapdl_path(\"/ansys_inc/v251/ansys/bin/ansys251\")\n>>> get_mapdl_path()\n'/ansys_inc/v251/ansys/bin/ansys251'\n\nChange default Ansys location on Windows\n\n>>> mapdl_path = \"C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/ANSYS251.exe\"\n>>> change_default_mapdl_path(mapdl_path)"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\npath to LS-Dyna executable. Must be a full path. This need not contain the name of the executable,\nbecause the name of the LS-Dyna executable depends on the precision."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nChange default Ansys LS-Dyna location on Linux\n\n>>> from ansys.tools.common.path import change_default_dyna_path, get_dyna_path\n>>> change_default_dyna_path(\"/ansys_inc/v251/ansys/bin/lsdyna251\")\n>>> get_dyna_path()\n'/ansys_inc/v251/ansys/bin/lsdyna251'\n\nChange default Ansys LS-Dyna location on Windows\n\n>>> dyna_path = \"C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/LSDYNA251.exe\"\n>>> change_default_dyna_path(dyna_path)"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nFull path for the Mechanical executable file to use."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nOn Windows:\n\n>>> from ansys.tools.common.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path(\"C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe\")\n>>> get_mechanical_path()\n'C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe'\n\nOn Linux:\n\n>>> from ansys.tools.common.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path(\"/ansys_inc/v251/aisol/.workbench\")\n>>> get_mechanical_path()\n'/ansys_inc/v251/aisol/.workbench'"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstring, optional\n\nPath for the Mechanical executable file (AnsysWBU.exe).\nThe default is None, in which case an attempt is made to\nobtain the path from the following sources in this order:\n\nThe default Mechanical paths (for example,\nC:/Program Files/Ansys Inc/vXXX/aisol/bin/AnsysWBU.exe)\n\nThe configuration file\n\nUser input\n\nIf a path is supplied, this method performs some checks. If the\nchecks are successful, it writes this path to the configuration\nfile."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nstr\n\nPath for the Mechanical executable file."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#notes","title":"The path.py module > Notes","text":"Notes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.common.path.SETTINGS_DIR. For example:\n\nYou can change the default for the exe_loc parameter either by modifying the\nconfig.txt file or by running this code:"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr, default: None\n\nPath of the LS-DYNA executable ('lsdynaXXX')."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nstr\n\nPath of the LS-DYNA executable."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#notes","title":"The path.py module > Notes","text":"Notes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.common.path.SETTINGS_DIR. For example:"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nYou can change the default exe_loc parameter value either by modifying the mentioned\nconfig.txt file or by executing this code:\n\n>>> from ansys.tools.common.path import save_dyna_path\n>>> save_dyna_path(\"/new/path/to/executable\")"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr, default: None\n\nPath of the MAPDL executable (ansysXXX)."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nstr\n\nPath of the MAPDL executable."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#notes","title":"The path.py module > Notes","text":"Notes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.common.path.SETTINGS_DIR. For example:"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#examples","title":"The path.py module > Examples","text":"Examples\n\nYou can change the default value for the exe_loc parameter either by modifying the mentioned\nconfig.txt file or by executing this code:\n\n>>> from ansys.tools.common.path import save_mapdl_path\n>>> save_mapdl_path(\"/new/path/to/executable\")"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\napplication\n\nstr\n\nName of the application to get the path for. For example, “mapdl”, “dyna”, or “mechanical”."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nOptional[str]\n\nThe path to the executable if it exists in the configuration file, otherwise None."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys MAPDL path.  The default is True.\n\nversion\n\nfloat, optional\n\nVersion of Ansys MAPDL to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys LS-Dyna path.  The default is True.\n\nversion\n\nfloat, optional\n\nVersion of Ansys LS-Dyna to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys Mechanical path.  The default is True.\n\nversion\n\nfloat, optional\n\nVersion of Ansys Mechanical to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#parameters","title":"The path.py module > Parameters","text":"Parameters\n\npath\n\nstr\n\nThe path to the Ansys executable. For example:\n\nMechanical:\n- Windows: C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe\n- Linux: /usr/ansys_inc/v251/aisol/.workbench\n\nMAPDL:\n- Windows: C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/ANSYS251.exe\n- Linux: /usr/ansys_inc/v251/ansys/bin/mapdl\n\nproduct: PRODUCT_TYPE\n\nThe product. For example: mapdl, mechanical, or dyna."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nint\n\nInteger version number (for example, 251)."},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#returns","title":"The path.py module > Returns","text":"Returns\n\nTuple[int, str]\n\nTuple with the latest version and path of the installation"},{"objectID":"Home","href":"api/ansys/tools/common/path/path/index.html#raises","title":"The path.py module > Raises","text":"Raises\n\nValueError\n\nNo Ansys installation found"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#the-dynapy-module","title":"The dyna.py module","text":"The dyna.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#summary","title":"The dyna.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\nCheck if the executable path is valid for Ansys LS-DYNA."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#description","title":"The dyna.py module > Description","text":"Description\n\nLS-DYNA-specific logic for the Ansys path tool."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#module-detail","title":"The dyna.py module > Module detail","text":"Module detail\n\n\n\ndyna.is_valid_executable_path(exe_loc: str) -> bool\n\nCheck if the executable path is valid for Ansys LS-DYNA."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#parameters","title":"The dyna.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nPath to the executable file."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/dyna/index.html#returns","title":"The dyna.py module > Returns","text":"Returns\n\nbool\n\nTrue if the path is valid for Ansys Dyna, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/index.html#the-abstractions-package","title":"The abstractions package","text":"The abstractions package\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/index.html#summary","title":"The abstractions package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\nconnection\n\nModule for abstract connection class.\n\nlauncher\n\nInterface definitions for implementing a local product launcher.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/index.html#description","title":"The abstractions package > Description","text":"Description\n\nInitialization module for abstractions."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/Myint.html#myint","title":"Myint","text":"Myint\n\n\n\nclass ansys.tools.common.versioning.Myint\n\nBases: VersionMeta, int\n\nProvides the custom class to hold integers for versioning."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/Myint.html#import-detail","title":"Myint > Import detail","text":"Import detail"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nThis section describes how to install Ansys Common Tools in user mode.\nIf you are interested in contributing to Ansys Common Tools, see\ncontribute for information on installing in developer mode."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo use pip to install Ansys Common Tools,\nrun this command:\n\nAlternatively, to install the latest version from this library’s\nGitHub repository,\nrun these commands:"},{"objectID":"Home","href":"user_guide/launcher/cli.html#command-line-interface","title":"Command-line interface","text":"Command-line interface\n\nUse the ansys-launcher command-line interface to edit default\nlaunch configurations.\n\nEach product plugin defines configuration options for its products."},{"objectID":"Home","href":"user_guide/launcher/cli.html#ansys-launcher","title":"Command-line interface > ansys-launcher","text":"ansys-launcher"},{"objectID":"Home","href":"user_guide/launcher/cli.html#configure","title":"Command-line interface > configure","text":"configure\n\nConfigure the options for a specific product and launch mode.\n\nThe available products and launch modes are determined dynamically\nfrom the installed plugins.\n\nTo get a list of products:\n\nTo get a list of launch modes for a given product:\n\nTo configure a product launch mode:"},{"objectID":"Home","href":"user_guide/launcher/cli.html#list-plugins","title":"Command-line interface > list-plugins","text":"list-plugins\n\nList the possible product/launch mode combinations."},{"objectID":"Home","href":"user_guide/launcher/cli.html#show-config","title":"Command-line interface > show-config","text":"show-config\n\nShow the current configuration."},{"objectID":"Home","href":"user_guide/launcher/cli.html#show-config-path","title":"Command-line interface > show-config-path","text":"show-config-path\n\nShow the path to the configuration file."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#launcherprotocol","title":"LauncherProtocol","text":"LauncherProtocol\n\n\n\nclass ansys.tools.common.abstractions.launcher.LauncherProtocol(*, config: LAUNCHER_CONFIG_T)\n\nBases: Protocol[LAUNCHER_CONFIG_T]\n\nProvides the interface for managing a local product instance.\n\nA plugin to the local product launcher must implement the interface defined in this class.\n\nTo check for compatibility, you should derive from this\nclass. For example MyLauncher(LauncherProtocol[MyConfigModel]).\nCheck the resulting code with Mypy.\n\nThe __init__ method should accept exactly one keyword-only\nparameter: config. Note that this is not enforced by\nMypy."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\nconfig :\n\nConfiguration options used to start the product. This parameter must be an instance of CONFIG_MODEL."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#overview","title":"LauncherProtocol > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the product instance.\n\nstop\n\nStop the product instance.\n\ncheck\n\nCheck if the product instance is responding to requests.\n\nProperties\n\n\n\n\n\nurls\n\nDictionary of URLs that the server is listening on.\n\nAttributes\n\n\n\n\n\nCONFIG_MODEL\n\nDefines the configuration options for the launcher.\n\nSERVER_SPEC\n\nDefines the server types that are started."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#import-detail","title":"LauncherProtocol > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#property-detail","title":"LauncherProtocol > Property detail","text":"Property detail\n\n\n\nproperty LauncherProtocol.urls: dict[str, str]\n\nDictionary of URLs that the server is listening on.\n\nThe keys of the returned dictionary must correspond\nto the keys defined in the\nLauncherProtocol.SERVER_SPEC attribute."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#attribute-detail","title":"LauncherProtocol > Attribute detail","text":"Attribute detail\n\n\n\nLauncherProtocol.CONFIG_MODEL: type[LAUNCHER_CONFIG_T]\n\nDefines the configuration options for the launcher.\n\nThe configuration options that this launcher accepts, specified\nas a dataclass. Note that\nthe default and metadata[METADATA_KEY_DOC] of the\nfields are used in the configuration CLI, if available.\n\n\n\nLauncherProtocol.SERVER_SPEC: dict[str, ServerType]\n\nDefines the server types that are started."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#examples","title":"LauncherProtocol > Examples","text":"Examples\n\nThis code defines a server that is accessible via a URL\nat the \"MAIN\" key and a server accessible via gRPC\nat the \"FILE_TRANSFER\" key.\n\nThe ProductInstance.urls attribute then has keys\n{\"MAIN\", \"FILE_TRANSFER\"}, whereas the\nProductInstance.channels attribute has only the\nkey \"FILE_TRANSFER\"."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#method-detail","title":"LauncherProtocol > Method detail","text":"Method detail\n\n\n\nLauncherProtocol.start() -> None\n\nStart the product instance.\n\n\n\nLauncherProtocol.stop(*, timeout: float | None = None) -> None\n\nStop the product instance.\n\n\n\nLauncherProtocol.check(*, timeout: float | None = None) -> bool\n\nCheck if the product instance is responding to requests."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\ntimeout :\n\nTime after which the instance can be forcefully stopped.\nThe timeout should be interpreted as a hint to the implementation.\nIt is not required to trigger a force-shutdown, but the stop must return within a finite time."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\ntimeout :\n\nTimeout in seconds for the check.\nThe timeout should be interpreted as a hint to the implementation.\nIt is not required to return within the given time,\nbut the check must return within a finite time,\nmeaning it must not hang indefinitely."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/LauncherProtocol.html#returns","title":"LauncherProtocol > Returns","text":"Returns\n\nbool\n\nWhether the product instance is responding."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysHostnameValueError.html#ansyshostnamevalueerror","title":"AnsysHostnameValueError","text":"AnsysHostnameValueError\n\n\n\nexception ansys.tools.common.exceptions.AnsysHostnameValueError(msg)\n\nBases: AnsysError\n\nError raised when hostname value is not valid."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysHostnameValueError.html#import-detail","title":"AnsysHostnameValueError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/path/index.html#the-path-package","title":"The path package","text":"The path package\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/index.html#summary","title":"The path package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\napplications\n\nApplication plugin for the Ansys path tool.\n\nSubmodules\n\n\n\n\n\npath\n\nModule for installation path retrieval.\n\nsave\n\nConvenience CLI to save the path for an Ansys application in the configuration.\n\nFunctions\n\n\n\n\n\nchange_default_ansys_path\n\nDeprecated. Use change_default_mapdl_path instead.\n\nchange_default_dyna_path\n\nChange your default Ansys LS-DYNA path.\n\nchange_default_mapdl_path\n\nChange your default Ansys MAPDL path.\n\nchange_default_mechanical_path\n\nChange your default Mechanical path.\n\nclear_configuration\n\nClear the entry of the specified product in the configuration file.\n\nfind_ansys\n\nObsolete method. Use find_mapdl instead.\n\nfind_dyna\n\nSearch for the Ansys LS-DYNA path within the standard install location.\n\nfind_mapdl\n\nSearch for the Ansys MAPDL path within the standard install location.\n\nfind_mechanical\n\nSearch for the Ansys Mechanical path in the standard installation location.\n\nget_ansys_path\n\nDeprecated. Use get_mapdl_path instead.\n\nget_available_ansys_installations\n\nGet a dictionary of available Ansys unified installation versions with their base paths.\n\nget_dyna_path\n\nAcquires the Ansys LS-DYNA path from a cached file or user input.\n\nget_latest_ansys_installation\n\nReturn a tuple with the latest Ansys installation version and its path.\n\nget_mapdl_path\n\nAcquires the Ansys MAPDL path.\n\nget_mechanical_path\n\nAcquires the Ansys Mechanical path.\n\nget_saved_application_path\n\nGet the saved path for a specific application from the configuration file.\n\nsave_ansys_path\n\nDeprecated. Use save_mapdl_path instead.\n\nsave_dyna_path\n\nFind Ansys LS-DYNA’s path or query the user.\n\nsave_mapdl_path\n\nFind the Ansys MAPDL’s path or query the user.\n\nsave_mechanical_path\n\nFind the Mechanical path or query the user.\n\nversion_from_path\n\nExtract the product version from a path.\n\nConstants\n\n\n\n\n\nLOG\n\n\n\nSETTINGS_DIR\n\n\n\nSUPPORTED_ANSYS_VERSIONS\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/index.html#description","title":"The path package > Description","text":"Description\n\nTools to find or cache installed Ansys products.\n\nThis is not concurrent-safe. (Multiple Python processes might race on this data.)"},{"objectID":"Home","href":"api/ansys/tools/common/path/index.html#module-detail","title":"The path package > Module detail","text":"Module detail"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/DataclassProtocol.html#dataclassprotocol","title":"DataclassProtocol","text":"DataclassProtocol\n\n\n\nclass ansys.tools.common.abstractions.launcher.DataclassProtocol\n\nBases: Protocol\n\nProvides the Protocol class for Python dataclasses."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/DataclassProtocol.html#overview","title":"DataclassProtocol > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\n__dataclass_fields__\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/DataclassProtocol.html#import-detail","title":"DataclassProtocol > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/DataclassProtocol.html#attribute-detail","title":"DataclassProtocol > Attribute detail","text":"Attribute detail\n\n\n\nDataclassProtocol.__dataclass_fields__: ClassVar[dict[str, Any]]\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/example_download/index.html#the-example_downloadpy-module","title":"The example_download.py module","text":"The example_download.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/example_download/index.html#summary","title":"The example_download.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDownloadManager\n\nManages downloads of example files.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/example_download/index.html#description","title":"The example_download.py module > Description","text":"Description\n\nModule for downloading examples from the PyAnsys Github example-data repository."},{"objectID":"Home","href":"user_guide/ansys_exceptions.html#ansys-exceptions","title":"Ansys exceptions","text":"Ansys exceptions\n\nAnsys exceptions are a set of predefined error-handling classes designed to help developers identify, catch, and handle errors that might occur when using Ansys tools. These exceptions provide a structured way to manage errors, ensuring that your programs can gracefully recover from unexpected issues and provide meaningful feedback to users.\n\nBy using Ansys exceptions, you can improve the robustness and maintainability of your code. They allow you to differentiate between various types of errors, such as invalid input types or logical inconsistencies, and handle them appropriately.\n\nYou can import exception classes and use the predefined exceptions directly in your programs:\n\nYou can also extend the base exception class to define your own custom exceptions. This allows you to create error types specific to your needs:"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#launcherprotocol","title":"LauncherProtocol","text":"LauncherProtocol\n\n\n\nclass ansys.tools.common.launcher.interface.LauncherProtocol(*, config: LAUNCHER_CONFIG_T)\n\nBases: Protocol[LAUNCHER_CONFIG_T]\n\nProvides the interface for managing a local product instance.\n\nA plugin to the local product launcher must implement the interface\ndefined in this class.\n\nTo check for compatibility, you should derive from this\nclass. For example MyLauncher(LauncherProtocol[MyConfigModel]).\nCheck the resulting code with Mypy.\n\nThe __init__ method should accept exactly one keyword-only\nparameter: config. Note that this is not enforced by Mypy."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\nconfig :\n\nConfiguration options used to start the product. This parameter\nmust be an instance of CONFIG_MODEL."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#overview","title":"LauncherProtocol > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the product instance.\n\nstop\n\nStop the product instance.\n\ncheck\n\nCheck if the product instance is responding to requests.\n\nProperties\n\n\n\n\n\nurls\n\nDictionary of URLs that the server is listening on.\n\nAttributes\n\n\n\n\n\nCONFIG_MODEL\n\nDefines the configuration options for the launcher.\n\nSERVER_SPEC\n\nDefines the server types that are started."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#import-detail","title":"LauncherProtocol > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#property-detail","title":"LauncherProtocol > Property detail","text":"Property detail\n\n\n\nproperty LauncherProtocol.urls: dict[str, str]\n\nDictionary of URLs that the server is listening on.\n\nThe keys of the returned dictionary must correspond to the keys\ndefined in the LauncherProtocol.SERVER_SPEC attribute."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#example","title":"LauncherProtocol > Example","text":"Example\n\n>>> launcher.urls\n{\"MAIN\": \"http://127.0.0.1:8080\", \"FILE_TRANSFER\": \"grpc://127.0.0.1:50051\"}"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#attribute-detail","title":"LauncherProtocol > Attribute detail","text":"Attribute detail\n\n\n\nLauncherProtocol.CONFIG_MODEL: ClassVar[type[LAUNCHER_CONFIG_T]]\n\nDefines the configuration options for the launcher.\n\nThe configuration options that this launcher accepts, specified\nas a dataclass. Note that the\ndefault and metadata[METADATA_KEY_DOC] of the fields are\nused in the configuration CLI, if available.\n\n\n\nLauncherProtocol.SERVER_SPEC: ClassVar[dict[str, ServerType]]\n\nDefines the server types that are started."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#examples","title":"LauncherProtocol > Examples","text":"Examples\n\nThis code defines a server that is accessible via a URL at the\n\"MAIN\" key and a server accessible via gRPC at the\n\"FILE_TRANSFER\" key.\n\nThe ProductInstance.urls attribute then has keys\n{\"MAIN\", \"FILE_TRANSFER\"}, whereas the\nProductInstance.channels attribute has only the\nkey \"FILE_TRANSFER\"."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#method-detail","title":"LauncherProtocol > Method detail","text":"Method detail\n\n\n\nLauncherProtocol.start() -> None\n\nStart the product instance.\n\n\n\nLauncherProtocol.stop(*, timeout: float | None = None) -> None\n\nStop the product instance.\n\n\n\nLauncherProtocol.check(*, timeout: float | None = None) -> bool\n\nCheck if the product instance is responding to requests."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\ntimeout\n\nfloat\n\nTime after which the instance can be forcefully stopped.\nThe timeout should be interpreted as a hint to the implementation.\nIt is not required to trigger a force-shutdown, but the stop\nmust return within a finite time."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#parameters","title":"LauncherProtocol > Parameters","text":"Parameters\n\ntimeout\n\nfloat\n\nTimeout in seconds for the check.\nThe timeout should be interpreted as a hint to the implementation.\nIt is not required to return within the given time, but the\ncheck must return within a finite time, meaning it must not\nhang indefinitely."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/LauncherProtocol.html#returns","title":"LauncherProtocol > Returns","text":"Returns\n\nbool\n\nTrue if the product instance is responding, False otherwise."},{"objectID":"Home","href":"user_guide/launcher/rationale.html#rationale","title":"Rationale","text":"Rationale\n\nThis page explains the problem that the local product launcher solves."},{"objectID":"Home","href":"user_guide/launcher/rationale.html#improvements-over-the-current-approach","title":"Rationale > Improvements over the current approach","text":"Improvements over the current approach\n\nCurrently, many PyAnsys libraries implement a launch function similar to the following:\n\nWhile this approach is simple to use, it has some disadvantages:\n\nThe keyword arguments make it difficult to determine how the server is launched.\n\nYou must always pass non-standard launch parameters to the launch_myproduct function. This makes examples generated on a continuous integration machine non-transferable. Users must replace the launch parameters with those applicable to their setups.\n\nEach product implements the local launcher separately, introducing accidental differences. This limits code reuse.\n\nThe local product launcher improves on the current approach in the following ways:\n\nThe launch_mode function is passed as an explicit argument, and all other configuration is collected into a single object. The available configuration options explicitly depend on the launch mode.\n\nBy default, the local product launcher separates configuration from the launching code. However, this separation is optional to support cases where multiple different configurations must be available at runtime. You can still pass the full configuration to the launching code.\n\nThe local product launcher provides a common interface for implementing the launching task and handles common tasks, such as ensuring that the product closes when the Python process exits. It does not attempt to remove the inherent differences between launching different products. Each specific PyAnsys library retains control over the launch through a plugin system."},{"objectID":"Home","href":"user_guide/launcher/rationale.html#potential-pitfalls","title":"Rationale > Potential pitfalls","text":"Potential pitfalls\n\nAs with any standardization effort, there are potential pitfalls:\n\n\n\nSee https://xkcd.com/927/"},{"objectID":"Home","href":"user_guide/launcher/rationale.html#future-improvements","title":"Rationale > Future improvements","text":"Future improvements\n\nHere are some ideas for how the local product launcher could evolve:\n\nAdd a server or daemon component that can be controlled:\n\nVia the PIM API\n\nFrom the command line\n\nExtend the helpers module to further simplify implementing launcher plugins.\n\nImplement launcher plugins separately from the product PyAnsys libraries. For example, you could create a docker-compose setup where all launched products share a mounted volume."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/index.html#the-launcherpy-module","title":"The launcher.py module","text":"The launcher.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/index.html#summary","title":"The launcher.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDataclassProtocol\n\nProvides the Protocol class for Python dataclasses.\n\nLauncherProtocol\n\nProvides the interface for managing a local product instance.\n\nEnums\n\n\n\n\n\nServerType\n\nDefines which protocols the server supports.\n\nConstants\n\n\n\n\n\nMETADATA_KEY_DOC\n\nKey used in the dataclasses.Field metadata for the option description.\n\nMETADATA_KEY_NOPROMPT\n\nKey used in the dataclasses.Field metadata to skip prompting for the option by default.\n\nFALLBACK_LAUNCH_MODE_NAME\n\n\n\nLAUNCHER_CONFIG_T\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/index.html#description","title":"The launcher.py module > Description","text":"Description\n\nInterface definitions for implementing a local product launcher.\n\nA plugin for the local product launcher must implement the LauncherProtocol class and register it."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/index.html#module-detail","title":"The launcher.py module > Module detail","text":"Module detail\n\n\n\nlauncher.METADATA_KEY_DOC = 'launcher_doc'\n\nKey used in the dataclasses.Field metadata for the option description.\n\n\n\nlauncher.METADATA_KEY_NOPROMPT = 'launcher_noprompt'\n\nKey used in the dataclasses.Field metadata to skip prompting for the option by default.\n\n\n\nlauncher.FALLBACK_LAUNCH_MODE_NAME = '__fallback__'\n\n\n\n\n\nlauncher.LAUNCHER_CONFIG_T\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to Ansys Common Tools.\n\nThe following contribution information is specific to Ansys Common Tools."},{"objectID":"Contribute","href":"contributing.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nInstalling Ansys Common Tools in developer mode allows you to modify and enhance the source.\n\nTo clone and install the latest Ansys Common Tools release in development mode, run these commands:"},{"objectID":"Contribute","href":"contributing.html#run-tests","title":"Contribute > Run tests","text":"Run tests\n\nAnsys Common Tools uses pytest for testing.\n\nPrior to running tests, you must run this command to install test dependencies:\n\nTo then run the tests, navigate to the root directory of the repository and run this command:"},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nAnsys Common Tools follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#build-the-documentation","title":"Contribute > Build the documentation","text":"Build the documentation\n\nYou can build Ansys Common Tools documentation locally.\n\nPrior to building the documentation, you must run this command to install\ndocumentation dependencies:\n\nTo then build the documentation, navigate to the docs directory and run\nthis command:\n\nThe documentation is built in the docs/_build/html directory.\n\nYou can clean the documentation build by running this command:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the Ansys Common Tools Issues page to report bugs and request new features. When possible, use the issue templates provided.\nIf your issue does not fit into one of these templates, click the link for opening a blank issue.\n\nIf you have general questions about the PyAnsys ecosystem, email\npyansys.core@ansys.com. If your\nquestion is specific to Ansys Common Tools, ask your\nquestion in an issue as described in the previous paragraph."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysPortValueError.html#ansysportvalueerror","title":"AnsysPortValueError","text":"AnsysPortValueError\n\n\n\nexception ansys.tools.common.exceptions.AnsysPortValueError(msg)\n\nBases: AnsysError\n\nError raised when port value is not valid."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysPortValueError.html#import-detail","title":"AnsysPortValueError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/index.html#the-product_instancepy-module","title":"The product_instance.py module","text":"The product_instance.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/index.html#summary","title":"The product_instance.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nProductInstance\n\nProvides a wrapper for interacting with the launched product instance.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/index.html#description","title":"The product_instance.py module > Description","text":"Description\n\nProvides a wrapper for interacting with launched product instances."},{"objectID":"Home","href":"api/ansys/tools/common/index.html#the-ansystoolscommon-library","title":"The ansys.tools.common library","text":"The ansys.tools.common library\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/index.html#summary","title":"The ansys.tools.common library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nabstractions\n\nInitialization module for abstractions.\n\nlauncher\n\nLocal product launcher.\n\npath\n\nTools to find or cache installed Ansys products.\n\nSubmodules\n\n\n\n\n\nexample_download\n\nModule for downloading examples from the PyAnsys Github example-data repository.\n\nexceptions\n\nExceptions module.\n\nlogger\n\nProvides the singleton helper class for the logger.\n\nlogger_formatter\n\nDefault logger formatter module.\n\nreport\n\nAnsys report tool.\n\nversioning\n\nA module containing various utilities.\n\nAttributes\n\n\n\n\n\n__version__\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/index.html#description","title":"The ansys.tools.common library > Description","text":"Description\n\nMain module."},{"objectID":"Home","href":"api/ansys/tools/common/index.html#module-detail","title":"The ansys.tools.common library > Module detail","text":"Module detail\n\n\n\ncommon.__version__\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#the-launchpy-module","title":"The launch.py module","text":"The launch.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#summary","title":"The launch.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nlaunch_product\n\nLaunch a product instance."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#description","title":"The launch.py module > Description","text":"Description\n\nDefines a function for launching Ansys products."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#module-detail","title":"The launch.py module > Module detail","text":"Module detail\n\n\n\nlaunch.launch_product(product_name: str, *, launch_mode: str | None = None, config: ansys.tools.common.launcher.interface.LAUNCHER_CONFIG_T | None = None) -> ansys.tools.common.launcher.product_instance.ProductInstance\n\nLaunch a product instance."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#parameters","title":"The launch.py module > Parameters","text":"Parameters\n\nproduct_name\n\nstr\n\nName of the product to launch.\n\nlaunch_mode\n\nstr, default: None\n\nLaunch mode to use. The default is None, in which case\nthe default launched mode is used. Options available\ndepend on the launcher plugin.\n\nconfig\n\nLAUNCHER_CONFIG_T, default: None\n\nConfiguration to use for launching the product. The default is\nNone, in which case the default configuration is used."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#returns","title":"The launch.py module > Returns","text":"Returns\n\nProductInstance\n\nObject that can be used to interact with the started product."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/launch/index.html#raises","title":"The launch.py module > Raises","text":"Raises\n\nTypeError\n\nIf the type of the configuration object does not match the type\nrequested by the launcher plugin."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#logger","title":"Logger","text":"Logger\n\n\n\nclass ansys.tools.common.logger.Logger(level: int = logging.ERROR, logger_name: str = 'Logger', column_width: int = 15)\n\nBases: object\n\nProvides the singleton logger."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#parameters","title":"Logger > Parameters","text":"Parameters\n\nlevel\n\nint, default: logging.ERROR\n\nOutput level of the logger.\n\nlogger_name\n\nstr, default: \"Logger\"\n\nName of the logger.\n\ncolumn_width\n\nint, default: 15\n\nMaximum width of the module and function names in the log output."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#overview","title":"Logger > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nget_logger\n\nGet the logger.\n\nset_level\n\nSet the logger output level.\n\nenable_output\n\nEnable logger output to a given stream.\n\nadd_file_handler\n\nSave logs to a file in addition to printing them to the standard output.\n\ndebug\n\nLog a message with level DEBUG.\n\ninfo\n\nLog a message with level INFO.\n\nwarning\n\nLog a message with level WARNING.\n\nwarn\n\nLog a message with level WARNING.\n\nerror\n\nLog a message with level ERROR.\n\ncritical\n\nLog a message with level CRITICAL.\n\nfatal\n\nLog a message with level FATAL.\n\nlog\n\nLog a message with a specified level."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#import-detail","title":"Logger > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#method-detail","title":"Logger > Method detail","text":"Method detail\n\n\n\nLogger.get_logger()\n\nGet the logger.\n\n\n\nLogger.set_level(level: int)\n\nSet the logger output level.\n\n\n\nLogger.enable_output(stream=None)\n\nEnable logger output to a given stream.\n\nIf a stream is not specified, sys.stderr is used.\n\n\n\nLogger.add_file_handler(logs_dir: str | pathlib.Path = '.log')\n\nSave logs to a file in addition to printing them to the standard output.\n\n\n\nLogger.debug(*args, **kwargs)\n\nLog a message with level DEBUG.\n\n\n\nLogger.info(*args, **kwargs)\n\nLog a message with level INFO.\n\n\n\nLogger.warning(*args, **kwargs)\n\nLog a message with level WARNING.\n\n\n\nLogger.warn(*args, **kwargs)\n\nLog a message with level WARNING.\n\n\n\nLogger.error(*args, **kwargs)\n\nLog a message with level ERROR.\n\n\n\nLogger.critical(*args, **kwargs)\n\nLog a message with level CRITICAL.\n\n\n\nLogger.fatal(*args, **kwargs)\n\nLog a message with level FATAL.\n\n\n\nLogger.log(level, msg, *args, **kwargs)\n\nLog a message with a specified level."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#returns","title":"Logger > Returns","text":"Returns\n\nLogger\n\nLogger."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#parameters","title":"Logger > Parameters","text":"Parameters\n\nlevel\n\nint\n\nOutput level of the logger."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#parameters","title":"Logger > Parameters","text":"Parameters\n\nstream: TextIO, default: None\n\nStream to output the log output to."},{"objectID":"Home","href":"api/ansys/tools/common/logger/Logger.html#parameters","title":"Logger > Parameters","text":"Parameters\n\nlogs_dir\n\nstr or Path, default: \".log\"\n\nDirectory to save the log file to. If it does not exist, it is created."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#the-mapdlpy-module","title":"The mapdl.py module","text":"The mapdl.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#summary","title":"The mapdl.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\nCheck if the executable path is valid for Ansys MAPDL."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#description","title":"The mapdl.py module > Description","text":"Description\n\nMAPDL-specific logic for the Ansys path tool."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#module-detail","title":"The mapdl.py module > Module detail","text":"Module detail\n\n\n\nmapdl.is_valid_executable_path(exe_loc: str) -> bool\n\nCheck if the executable path is valid for Ansys MAPDL."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#parameters","title":"The mapdl.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nPath to the executable file."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mapdl/index.html#returns","title":"The mapdl.py module > Returns","text":"Returns\n\nbool\n\nTrue if the path is valid for Ansys MAPDL, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/VersionError.html#versionerror","title":"VersionError","text":"VersionError\n\n\n\nexception ansys.tools.common.exceptions.VersionError(msg)\n\nBases: AnsysError\n\nAn exception raised when a version is not valid."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/VersionError.html#import-detail","title":"VersionError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/index.html#the-helpers-package","title":"The helpers package","text":"The helpers package\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/index.html#summary","title":"The helpers package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ngrpc\n\nHelpers for interacting with gRPC servers.\n\nports\n\nHelpers for managing port assignment.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/index.html#description","title":"The helpers package > Description","text":"Description\n\nHelper modules for implementing local product launcher plugins."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#the-grpcpy-module","title":"The grpc.py module","text":"The grpc.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#summary","title":"The grpc.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncheck_grpc_health\n\nCheck that a gRPC server is responding to health check requests."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#description","title":"The grpc.py module > Description","text":"Description\n\nHelpers for interacting with gRPC servers."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#module-detail","title":"The grpc.py module > Module detail","text":"Module detail\n\n\n\ngrpc.check_grpc_health(channel: grpc.Channel, timeout: float | None = None) -> bool\n\nCheck that a gRPC server is responding to health check requests."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#parameters","title":"The grpc.py module > Parameters","text":"Parameters\n\nchannel :\n\nChannel to the gRPC server.\n\ntimeout :\n\nTimeout in seconds for the gRPC health check request."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/grpc/index.html#returns","title":"The grpc.py module > Returns","text":"Returns\n\nbool\n\nTrue if the health check succeeds, False otherwise."},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-tools-common endpoints, their capabilities, and how\nto interact with them programmatically.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/index.html#the-interfacepy-module","title":"The interface.py module","text":"The interface.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/index.html#summary","title":"The interface.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nDataclassProtocol\n\nProtocol for objects generated with dataclasses.dataclass().\n\nLauncherProtocol\n\nProvides the interface for managing a local product instance.\n\nEnums\n\n\n\n\n\nServerType\n\nDefines which protocols the server supports.\n\nConstants\n\n\n\n\n\nMETADATA_KEY_DOC\n\nKey used in the dataclasses.Field metadata for the option description.\n\nMETADATA_KEY_NOPROMPT\n\nKey used in the dataclasses.Field metadata to skip prompting for\n\nFALLBACK_LAUNCH_MODE_NAME\n\n\n\nLAUNCHER_CONFIG_T\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/index.html#description","title":"The interface.py module > Description","text":"Description\n\nInterface definitions for implementing a local product launcher.\n\nA plugin for the local product launcher must implement the LauncherProtocol\nclass and register it."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/index.html#module-detail","title":"The interface.py module > Module detail","text":"Module detail\n\n\n\ninterface.METADATA_KEY_DOC = 'launcher_doc'\n\nKey used in the dataclasses.Field metadata for the option description.\n\n\n\ninterface.METADATA_KEY_NOPROMPT = 'launcher_noprompt'\n\nKey used in the dataclasses.Field metadata to skip prompting for\nthe option by default.\n\n\n\ninterface.FALLBACK_LAUNCH_MODE_NAME = '__fallback__'\n\n\n\n\n\ninterface.LAUNCHER_CONFIG_T\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionMeta.html#versionmeta","title":"VersionMeta","text":"VersionMeta\n\n\n\nclass ansys.tools.common.versioning.VersionMeta\n\nProvides a metaclass for version comparison.\n\nImplements modifications to magic methods."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionMeta.html#overview","title":"VersionMeta > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__le__\n\nLess equal.\n\n__lt__\n\nLess than.\n\n__ge__\n\nGreater equal.\n\n__gt__\n\nGreater than.\n\n__eq__\n\nEqual method.\n\n__ne__\n\nNot equal.\n\n__hash__\n\nCall the underlying __hash__ method."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionMeta.html#import-detail","title":"VersionMeta > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionMeta.html#method-detail","title":"VersionMeta > Method detail","text":"Method detail\n\n\n\nVersionMeta.__le__(__x: str | int) -> bool\n\nLess equal.\n\nIf compared against a string that contains dev, it always evaluates to True.\nIf compared against an integer, it performs a classic ‘less equal’ operation.\n\n\n\nVersionMeta.__lt__(__x: str | int) -> bool\n\nLess than.\n\nIf compared against a string which contains dev, it always evaluates to True.\nIf compared against an integer, it performs a classic ‘less than’ operation.\n\n\n\nVersionMeta.__ge__(__x: str | int) -> bool\n\nGreater equal.\n\nIf compared against a string that contains dev, it always evaluates to False.\nIf compared against an integer, it performs a classic ‘greater equal’ operation.\n\n\n\nVersionMeta.__gt__(__x: str | int) -> bool\n\nGreater than.\n\nIf compared against a string that contains dev, it always evaluates to False.\nIf compared against an integer, it performs a classic ‘greater than’ operation.\n\n\n\nVersionMeta.__eq__(__x: object) -> bool\n\nEqual method.\n\nIf compared against a string that contains ‘’dev``, it always evaluates to False.\nIf compared against an integer, it performs a classic ‘equal’ operation.\n\n\n\nVersionMeta.__ne__(__x: object) -> bool\n\nNot equal.\n\nIf compared against a string that contains dev, it always evaluates to not\n‘equal’ operation (True). If compared against an integer, it performs a classic ‘not equal’ operation.\n\n\n\nVersionMeta.__hash__() -> int\n\nCall the underlying __hash__ method."},{"objectID":"Home","href":"user_guide/ansys_tools_path.html#ansys-path-tool","title":"Ansys path tool","text":"Ansys path tool\n\nUse the Ansys path tool to find the path of the latest local Ansys installation. Importing this tool and then call the find_ansys function to return the installation path:"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/index.html#the-connectionpy-module","title":"The connection.py module","text":"The connection.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/index.html#summary","title":"The connection.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nAbstractGRPCConnection\n\nAbstract class for managing gRPC connections.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/index.html#description","title":"The connection.py module > Description","text":"Description\n\nModule for abstract connection class."},{"objectID":"Home","href":"user_guide/report.html#ansys-report-tool","title":"Ansys report tool","text":"Ansys report tool\n\nUse the Ansys report tool to generate detailed reports. This tool includes the main Report class, which extends scooby.Report and customizes it to display Ansys libraries and\nenvironment variables in a standardized format.\n\nTo use the tool, import it:\n\nHere is an example of how to use the tool to display Ansys variables and libraries:\n\nThe typical output of a report looks like this:\n\nBy default, the Report class searches for a predefined set of environment variables. The following strings are searched in the available environment variables, and any matches are included in the report:\n\nAWP_ROOT\n\nANS\n\nMAPDL\n\nFLUENT\n\nAEDT\n\nDPF\n\nThe report also includes several Python packages by default. These packages are always included:\n\nansys-mapdl-core\n\nansys-dpf-core\n\nansys-dpf-post\n\nansys-dpf-gate\n\nansys-fluent-core\n\npyaedt\n\nansys-platform-instancemanagement\n\nansys-grantami-bomanalytics\n\nansys-openapi-common\n\nansys-mapdl-reader\n\nansys-fluent-visualization\n\nansys-fluent-parametric\n\nansys-sphinx-theme\n\nansys-seascape\n\npyansys-tools-report\n\npyansys-tools-versioning\n\nmatplotlib\n\nnumpy\n\npyvista\n\nappdirs\n\ntqdm\n\npyiges\n\nscipy\n\ngrpc\n\ngoogle.protobuf\n\nIf you want the Report class to include additional environment variables by default, create an\nissue and provide details about the variables that you want to include."},{"objectID":"Home","href":"user_guide/versioning.html#ansys-versioning-tool","title":"Ansys versioning tool","text":"Ansys versioning tool\n\nUse the Ansys versioning tool to enforce version requirements for methods in classes. The requires_version decorator, available in the ansys.tools.versioning module, specifies the required version and version map. This decorator accepts the following:\n\nThe required version as a string (\"<Major>.<Minor>.<Patch>\") or\na tuple ((<Major>, <Minor>, <Patch>)).\n\nA version map in the form of a dictionary relating the required version to\nits Ansys unified installation. For example:\n\nThe requires_version decorator is expected to be used in all the desired\nmethods of a class containing a _server_version attribute. If the class in which the decorator is used does not contain this attribute, an AttributeError is raised.\n\nThe following example declares a generic Server class and a VERSION_MAP dictionary:\n\nSuppose you create two servers using the previous class. Because each server uses a different version, some methods are available on both servers while other methods are not:\n\nIf you run each of these methods, both instances execute old_method without any issues:\n\nHowever, when you run new_method, the old server raises a\nVersionError exception. This exception indicates that the method requires a higher server version than the one available:"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/index.html#the-launcher-package","title":"The launcher package","text":"The launcher package\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/index.html#summary","title":"The launcher package > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\nhelpers\n\nHelper modules for implementing local product launcher plugins.\n\nSubmodules\n\n\n\n\n\nconfig\n\nTools for managing local product launcher configuration.\n\ninterface\n\nInterface definitions for implementing a local product launcher.\n\nlaunch\n\nDefines a function for launching Ansys products.\n\nproduct_instance\n\nProvides a wrapper for interacting with launched product instances.\n\nFunctions\n\n\n\n\n\nlaunch_product\n\nLaunch a product instance.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/index.html#description","title":"The launcher package > Description","text":"Description\n\nLocal product launcher."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/index.html#module-detail","title":"The launcher package > Module detail","text":"Module detail"},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#report","title":"Report","text":"Report\n\n\n\nclass ansys.tools.common.report.Report(additional=None, ncol=3, text_width=80, sort=False, gpu=True, ansys_vars=None, ansys_libs=None)\n\nBases: scooby.Report\n\nGenerate a scooby.Report instance."},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#parameters","title":"Report > Parameters","text":"Parameters\n\nadditional\n\nlist(ModuleType), list(str), default: None\n\nList of packages or package names to add to output information.\n\nncol\n\nint, default: 3\n\nNumber of package-columns in the HTML table. This parameter is\napplicable only has effect if mode='HTML' or mode='html'.\n\ntext_width\n\nint, default: 80\n\nText width for non-HTML display modes.\n\nsort\n\nbool, default: False\n\nWhether to alphabetically sort the packages.\n\ngpu\n\nbool, default: True\n\nWhether to gather information about the GPU. While\nthe default is``True``, if rendering issues are\nexperienced, pass False to safely generate\na report.\n\nansys_vars\n\nlist of str, default: None\n\nList containing the Ansys environment variables to report on.\nFor example, [\"MYVAR_1\", \"MYVAR_2\" ...]\n\nansys_libs\n\ndict {str\n\nstr}, default: None\n\nDictionary containing the Ansys libraries and versions to report on.\nFor example, {\"MyLib\" : \"v1.2\", ...}."},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#overview","title":"Report > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nproject_info\n\nGet information regarding the Ansys environment and installation.\n\nSpecial methods\n\n\n\n\n\n__repr__\n\nPrint out the report."},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#import-detail","title":"Report > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#method-detail","title":"Report > Method detail","text":"Method detail\n\n\n\nReport.project_info()\n\nGet information regarding the Ansys environment and installation.\n\n\n\nReport.__repr__()\n\nPrint out the report."},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#returns","title":"Report > Returns","text":"Returns\n\nstr\n\nProject information (environment variables and installation)."},{"objectID":"Home","href":"api/ansys/tools/common/report/Report.html#returns","title":"Report > Returns","text":"Returns\n\nstr\n\nReport statement."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/ServerType.html#servertype","title":"ServerType","text":"ServerType\n\n\n\nclass ansys.tools.common.abstractions.launcher.ServerType(*args, **kwds)\n\nBases: enum.Enum\n\nDefines which protocols the server supports.\n\nThe ServerType class is used as values in the LauncherProtocol.SERVER_SPEC\nattribute to define the capabilities of the servers started with a given product and launch method."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/ServerType.html#overview","title":"ServerType > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nGENERIC\n\nGeneric server, which responds at a given URL and port.\n\nGRPC\n\nServer that can be accessed via gRPC."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/ServerType.html#import-detail","title":"ServerType > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/launcher/ServerType.html#attribute-detail","title":"ServerType > Attribute detail","text":"Attribute detail\n\n\n\nServerType.GENERIC\n\nGeneric server, which responds at a given URL and port.\n\nThe generic server type can be used for any server. It does not\ninclude information about which protocol should be used.\n\n\n\nServerType.GRPC\n\nServer that can be accessed via gRPC.\n\nServers of this type are accessible via the ProductInstance.channels\nattribute."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#launcher-plugin-creation","title":"Launcher plugin creation","text":"Launcher plugin creation\n\nThis page explains how to create a plugin for the local product launcher. The plugin in the example launches Ansys Composite PrepPost (ACP) as a subprocess.\n\nThe local product launcher defines the interface that a plugin must satisfy in the interface module.\n\nTo simplify the example, the plugin business logic is kept minimal."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#create-configuration","title":"Launcher plugin creation > Create configuration","text":"Create configuration\n\nTo start, you must create the user-definable configuration for the launcher. Because\nACP should be run as a subprocess, the path to the server binary must be defined.\n\nThis configuration is defined as a dataclass:\n\nThe configuration class defines a single binary_path option of type str."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#define-launcher","title":"Launcher plugin creation > Define launcher","text":"Define launcher\n\nNext, you must define the launcher itself. The full launcher code follows. Because\nthere’s quite a lot going on in this code, descriptions of each part are provided.\n\nThe launcher class inherits from LauncherProtocol[LauncherConfig]. This isn’t a requirement, but it means a type checker like Mypy can verify that the LauncherProtocol interface is fulfilled.\n\nNext, setting CONFIG_MODEL = DirectLauncherConfig connects the launcher to the configuration class.\n\nThe subsequent line, SERVER_SPEC = {\"main\": ServerType.GRPC}, defines which kind of servers the\nproduct starts. Here, there’s only a single server, which is accessible via gRPC. The keys in this dictionary can be chosen arbitrarily, but they should be consistent across the launcher implementation.\nIdeally, use the key to convey some meaning. For example, \"main\" could refer to the main interface\nto your product and file_transfer could refer to an additional service for file upload and download.\n\nThe __init__ method must accept exactly one keyword-only argument, config, which contains the\nconfiguration instance. In this example, the configuration is stored in the _config attribute.\nFor the _url and _process attributes, only the type is declared for the benefits of the type checker\n\nThe core of the launcher implementation is in the start and stop methods:\n\nThe start method selects an available port using the\nfind_free_ports() function. It then starts the server as a subprocess. Note that here, the server output is simply discarded. In a real launcher, you should add the option to redirect it (for example to a file).\nThe _url attribute keeps track of the URL and port that the server should be accessible on.\n\nThe start method terminates the subprocess:\n\nIf your product is prone to ignoring SIGTERM, you might want to add a timeout to the\n.wait method and retry with the\n.kill method instead of the\n.terminate method.\n\nNext, you must provide a way to verify that the product has successfully launched. This is implemented\nin the check method. Because the server implements gRPC health checking, the\ncheck_grpc_health() helper can be used for this purpose:\n\nFinally, the _url attribute stored in the start method must\nbe made available in the urls property:\n\nNote that the return value for the urls property should adhere to the schema defined in SERVER_SPEC.\n\n"},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#register-entrypoint","title":"Launcher plugin creation > Register entrypoint","text":"Register entrypoint\n\nHaving defined all the necessary components for a local product launcher plugin, you can now register the\nplugin, which makes it available. You do this through the Python entrypoints mechanism.\n\nYou define the entrypoint in your package’s build configuration. The exact syntax depends on which packaging tool you use:\n\nSetuptools\n\nSetuptools can accept its configuration in one of three ways. Choose the one that applies to your project:\n\nIn a pyproject.toml file:\n\nIn a setup.cfg file:\n\nIn a setup.py file:\n\nFor more information, see the Entry Points for Plugins in the Setuptools documentation.\n\nFlit\n\nIn a pyproject.toml file:\n\nFor more information, see the Entry points sections in the Flit documentation.\n\nPoetry\n\nIn a pyproject.toml file:\n\nFor more information, see the plugins in the Poetry documentation.\n\nIn all cases, ansys.tools.local_product_launcher.launcher is an identifier specifying that the entrypoint defines a local product launcher plugin. It must be kept the same.\n\nThe entrypoint itself has two parts:\n\nThe entrypoint name ACP.direct consists of two parts: ACP is the product name, and direct is the launch mode identifier. The name must be of this format and contain exactly one dot . separating the two parts.\n\nThe entrypoint value <your.module.name>:DirectLauncher defines where the launcher implementation is located. In other words, it must load the launcher class:\n\nFor the entrypoints to update, you must re-install your package (even if it was installed with the pip install -e command)."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#add-command-line-default-and-description","title":"Launcher plugin creation > Add command-line default and description","text":"Add command-line default and description\n\nWith the three preceding parts, you’ve successfully created a local product launcher plugin. \n\nYou can now improve the usability of the command line by adding a default and a description to the configuration class.\n\nTo do so, edit the DirectLaunchConfig class, using the dataclasses.field() function to enrich\nthe binary_path:\n\nThe default value is specified as the default argument.\n\nThe description is given in the metadata dictionary, using the special key METADATA_KEY_DOC.\n\nFor the default value, use the get_available_ansys_installations\nhelper to find the Ansys installation directory.\n\nNow, when running ansys-launcher configure ACP direct, users can see and accept the default value if they want.\n\nIf the default value is None, it is converted to the string default for command-line interface. This allows implementing more complicated default behaviors that may not be expressible when the command-line interface is run."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#add-a-fallback-launch-mode","title":"Launcher plugin creation > Add a fallback launch mode","text":"Add a fallback launch mode\n\nIf you want to provide a fallback launch mode that can be used without any configuration, you can add an entrypoint with the special name <product>.__fallback__.\n\nFor example, to make DirectLauncher the fallback for ACP, add this entry point:\n\nThe fallback launch mode is used with its default configuration. This means that the configuration class must have default values for all its fields."},{"objectID":"Home","href":"user_guide/launcher/plugin_creation.html#hide-advanced-options","title":"Launcher plugin creation > Hide advanced options","text":"Hide advanced options\n\nIf your launcher plugin has advanced options, you can skip prompting the user for them by default.\nThis is done by setting the special key METADATA_KEY_NOPROMPT\nto True in the metadata dictionary:"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/ProductInstanceError.html#productinstanceerror","title":"ProductInstanceError","text":"ProductInstanceError\n\n\n\nexception ansys.tools.common.exceptions.ProductInstanceError(message: str)\n\nBases: AnsysError\n\nCustom exception for ProductInstance lifecycle errors."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/ProductInstanceError.html#import-detail","title":"ProductInstanceError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/DataclassProtocol.html#dataclassprotocol","title":"DataclassProtocol","text":"DataclassProtocol\n\n\n\nclass ansys.tools.common.launcher.interface.DataclassProtocol\n\nBases: Protocol\n\nProtocol for objects generated with dataclasses.dataclass()."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/DataclassProtocol.html#overview","title":"DataclassProtocol > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\n__dataclass_fields__\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/DataclassProtocol.html#import-detail","title":"DataclassProtocol > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/DataclassProtocol.html#attribute-detail","title":"DataclassProtocol > Attribute detail","text":"Attribute detail\n\n\n\nDataclassProtocol.__dataclass_fields__: ClassVar[dict[str, Any]]\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#the-versioningpy-module","title":"The versioning.py module","text":"The versioning.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#summary","title":"The versioning.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nVersionMeta\n\nProvides a metaclass for version comparison.\n\nSemanticVersion\n\nProvides a class for semantic versioning.\n\nMystr\n\nProvides the custom class to hold strings for versioning.\n\nMyint\n\nProvides the custom class to hold integers for versioning.\n\nVersionNumber\n\nProvides the class for version comparison.\n\nFunctions\n\n\n\n\n\nsanitize_version_string\n\nSanitize a version string number by adding additional zeros.\n\nsanitize_version_tuple\n\nSanitize a version number by adding additional zeros.\n\nversion_string_as_tuple\n\nConvert a semantic version string into a tuple.\n\nversion_tuple_as_string\n\nConvert a semantic version tuple into a string.\n\nserver_meets_version\n\nCheck if server meets the required version.\n\nrequires_version\n\nEnsure the method called matches a certain version.\n\nvalid_version_string\n\nCheck if the version string is valid.\n\nvalid_semantic_version\n\nCheck if a semantic version is valid.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#description","title":"The versioning.py module > Description","text":"Description\n\nA module containing various utilities."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#module-detail","title":"The versioning.py module > Module detail","text":"Module detail\n\n\n\nversioning.sanitize_version_string(version_string)\n\nSanitize a version string number by adding additional zeros.\n\n\n\nversioning.sanitize_version_tuple(version_tuple)\n\nSanitize a version number by adding additional zeros.\n\n\n\nversioning.version_string_as_tuple(version_string)\n\nConvert a semantic version string into a tuple.\n\n\n\nversioning.version_tuple_as_string(version_tuple)\n\nConvert a semantic version tuple into a string.\n\n\n\nversioning.server_meets_version(server_version, required_version)\n\nCheck if server meets the required version.\n\n\n\nversioning.requires_version(version, version_map=None)\n\nEnsure the method called matches a certain version.\n\n\n\nversioning.valid_version_string(version)\n\nCheck if the version string is valid.\n\n\n\nversioning.valid_semantic_version(iterable)\n\nCheck if a semantic version is valid."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nversion_string\n\nstr\n\nA string representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#returns","title":"The versioning.py module > Returns","text":"Returns\n\nstr\n\nA string representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#examples","title":"The versioning.py module > Examples","text":"Examples\n\n>>> sanitize_version_string(\"0\")\n'0.0.0'\n>>> sanitize_version_string(\"1.2\")\n'1.2.0'\n>>> sanitize_version_string(\"0.3.4\")\n'0.3.4'"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nversion_tuple\n\ntuple\n\nA tuple representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#returns","title":"The versioning.py module > Returns","text":"Returns\n\ntuple\n\nA tuple representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#examples","title":"The versioning.py module > Examples","text":"Examples\n\n>>> sanitize_version_tuple((0,))\n(0, 0, 0)\n>>> sanitize_version_tuple((1, 2))\n(1, 2, 0)\n>>> sanitize_version_tuple((0, 3, 4))\n(0, 3, 4)"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nversion_string\n\nstr\n\nA string representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#returns","title":"The versioning.py module > Returns","text":"Returns\n\nversion_tuple\n\ntuple\n\nA tuple representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#examples","title":"The versioning.py module > Examples","text":"Examples\n\n>>> version_string_as_tuple(\"0.3.4\")\n(0, 3, 4)\n>>> version_string_as_tuple(\"1.2\")\n(1, 2, 0)"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nversion_tuple\n\ntuple\n\nA tuple representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#returns","title":"The versioning.py module > Returns","text":"Returns\n\nstr\n\nA string representing a semantic version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#examples","title":"The versioning.py module > Examples","text":"Examples\n\n>>> version_tuple_as_string((0, 3, 4))\n'0.3.4'\n>>> version_tuple_as_string((1, 2))\n'1.2.0'"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nserver_version\n\nstr, tuple, obj\n\nA string or tuple representing the server version.\nIf it is an object different from the previous ones, it must have a ‘_server_version’ attribute.\n\nrequired_version\n\nstr, tuple\n\nA string or tuple representing the version to be meet."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#returns","title":"The versioning.py module > Returns","text":"Returns\n\nbool\n\nTrue if server version meets required version, False if not."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#raises","title":"The versioning.py module > Raises","text":"Raises\n\nValueError\n\nIf the ‘server_version’ object does not have ‘_server_version’ attribute."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#examples","title":"The versioning.py module > Examples","text":"Examples\n\n>>> server_version, required_version = \"1.2.0\", \"1.3.0\"\n>>> server_meets_version(server_version, required_version)\nFalse\n>>> server_version, required_version = (1, 2, 0), (1, 3, 0)\n>>> server_meets_version(server_version, required_version)\nFalse\n>>> server_version, required_version = \"2.3.0\", \"1.3.0\"\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> server_version, required_version = (2, 3, 0), (1, 3, 0)\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> server_version, required_version = (0, 0, 0), (0, 0, 0)\n>>> server_meets_version(server_version, required_version)\nTrue\n>>> class MyServer:\n        def __init__(self):\n            self._server_version = \"1.2.0\"\n>>> server = MyServer()\n>>> server_version, required_version = server, \"1.3.0\"\n>>> server_meets_version(server, required_version)"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#parameters","title":"The versioning.py module > Parameters","text":"Parameters\n\nversion\n\nstr, tuple\n\nA string or tuple representing the minimum required version.\n\nversion_map\n\ndict, optional\n\nA dictionary relating server version and ANSYS unified install version."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/index.html#raises","title":"The versioning.py module > Raises","text":"Raises\n\nAttributeError\n\nDecorated class method requires _server_version attribute.\n\nVersionError\n\nDecorated class method is not supported by server version."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#productinstance","title":"ProductInstance","text":"ProductInstance\n\n\n\nclass ansys.tools.common.launcher.product_instance.ProductInstance(*, launcher: ansys.tools.common.launcher.interface.LauncherProtocol[ansys.tools.common.launcher.interface.LAUNCHER_CONFIG_T])\n\nProvides a wrapper for interacting with the launched product instance.\n\nThis class allows stopping and starting of the product instance. It also\nprovides access to its server URLs and gRPC channels.\n\nThe ProductInstance class can be used as a context manager, stopping\nthe instance when exiting the context."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#overview","title":"ProductInstance > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nstart\n\nStart the product instance.\n\nstop\n\nStop the product instance.\n\nrestart\n\nStop and then start the product instance.\n\ncheck\n\nCheck if all servers are responding to requests.\n\nwait\n\nWait for all servers to respond.\n\nProperties\n\n\n\n\n\nurls\n\nRead-only mapping of server keys to their URLs.\n\nstopped\n\nFlag indicating if the product instance is currently stopped.\n\nchannels\n\nRead-only mapping of server keys to gRPC channels.\n\nSpecial methods\n\n\n\n\n\n__enter__\n\nEnter the context manager defined by the product instance.\n\n__exit__\n\nStop the product instance when exiting a context manager."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#import-detail","title":"ProductInstance > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#property-detail","title":"ProductInstance > Property detail","text":"Property detail\n\n\n\nproperty ProductInstance.urls: Mapping[str, str]\n\nRead-only mapping of server keys to their URLs.\n\n\n\nproperty ProductInstance.stopped: bool\n\nFlag indicating if the product instance is currently stopped.\n\n\n\nproperty ProductInstance.channels: Mapping[str, grpc.Channel]\n\nRead-only mapping of server keys to gRPC channels."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#method-detail","title":"ProductInstance > Method detail","text":"Method detail\n\n\n\nProductInstance.__enter__() -> ProductInstance\n\nEnter the context manager defined by the product instance.\n\n\n\nProductInstance.__exit__(*exc: Any) -> None\n\nStop the product instance when exiting a context manager.\n\n\n\nProductInstance.start() -> None\n\nStart the product instance.\n\n\n\nProductInstance.stop(*, timeout: float | None = None) -> None\n\nStop the product instance.\n\n\n\nProductInstance.restart(stop_timeout: float | None = None) -> None\n\nStop and then start the product instance.\n\n\n\nProductInstance.check(timeout: float | None = None) -> bool\n\nCheck if all servers are responding to requests.\n\n\n\nProductInstance.wait(timeout: float) -> None\n\nWait for all servers to respond.\n\nThis method repeatedly checks if the servers are running, returning as soon\nas they are all ready."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#raises","title":"ProductInstance > Raises","text":"Raises\n\nProductInstanceError\n\nIf the instance is already started or the URLs do not match\nthe launcher’s SERVER_SPEC."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#parameters","title":"ProductInstance > Parameters","text":"Parameters\n\ntimeout\n\nfloat, default: None\n\nTime in seconds after which the instance is forcefully stopped.\nNot all launch methods implement this parameter."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#raises","title":"ProductInstance > Raises","text":"Raises\n\nProductInstanceError\n\nIf the instance is already stopped."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#parameters","title":"ProductInstance > Parameters","text":"Parameters\n\nstop_timeout\n\nfloat, default: None\n\nTime in seconds after which the instance is forcefully stopped."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#raises","title":"ProductInstance > Raises","text":"Raises\n\nProductInstanceError\n\nIf the instance is already stopped or URL keys mismatch."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#parameters","title":"ProductInstance > Parameters","text":"Parameters\n\ntimeout\n\nfloat, default: None\n\nTime in seconds to wait for the servers to respond. There\nis no guarantee that the check() method returns within this time.\nInstead, this parameter is used as a hint to the launcher implementation."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#parameters","title":"ProductInstance > Parameters","text":"Parameters\n\ntimeout\n\nfloat, default: None\n\nWait time in seconds before raising an exception."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/product_instance/ProductInstance.html#raises","title":"ProductInstance > Raises","text":"Raises\n\nProductInstanceError\n\nIf the server still has not responded after timeout seconds."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/ports/index.html#the-portspy-module","title":"The ports.py module","text":"The ports.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/ports/index.html#summary","title":"The ports.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nfind_free_ports\n\nFind free ports on the localhost."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/ports/index.html#description","title":"The ports.py module > Description","text":"Description\n\nHelpers for managing port assignment."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/ports/index.html#module-detail","title":"The ports.py module > Module detail","text":"Module detail\n\n\n\nports.find_free_ports(num_ports: int = 1) -> list[int]\n\nFind free ports on the localhost.\n\nBecause there is no way to reserve a port that would still allow\na server to connect to it, there is no guarantee that the ports\nare still free when eventually used."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/helpers/ports/index.html#parameters","title":"The ports.py module > Parameters","text":"Parameters\n\nnum_ports :\n\nNumber of free ports to obtain."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/index.html#the-applications-package","title":"The applications package","text":"The applications package\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/index.html#summary","title":"The applications package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ndyna\n\nLS-DYNA-specific logic for the Ansys path tool.\n\nmapdl\n\nMAPDL-specific logic for the Ansys path tool.\n\nmechanical\n\nMechanical-specific logic for the Ansys path tool.\n\nClasses\n\n\n\n\n\nApplicationPlugin\n\nProvides for application plugins.\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/index.html#description","title":"The applications package > Description","text":"Description\n\nApplication plugin for the Ansys path tool.\n\nThis defines the interface of a plugin, which is implemented using a module."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/index.html#the-logger_formatterpy-module","title":"The logger_formatter.py module","text":"The logger_formatter.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/index.html#summary","title":"The logger_formatter.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nPyAnsysBaseFormatter\n\nProvides a custom formatter to truncate long columns.\n\nConstants\n\n\n\n\n\nDEFAULT_FORMATTER\n\nDefault formatter for the logger.\n\nDEFAULT_HEADER\n\nDefault header for the log file.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/index.html#description","title":"The logger_formatter.py module > Description","text":"Description\n\nDefault logger formatter module."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/index.html#module-detail","title":"The logger_formatter.py module > Module detail","text":"Module detail\n\n\n\nlogger_formatter.DEFAULT_FORMATTER: Final\n\nDefault formatter for the logger.\n\n\n\nlogger_formatter.DEFAULT_HEADER\n\nDefault header for the log file."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/PyAnsysBaseFormatter.html#pyansysbaseformatter","title":"PyAnsysBaseFormatter","text":"PyAnsysBaseFormatter\n\n\n\nclass ansys.tools.common.logger_formatter.PyAnsysBaseFormatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)\n\nBases: logging.Formatter\n\nProvides a custom formatter to truncate long columns."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/PyAnsysBaseFormatter.html#overview","title":"PyAnsysBaseFormatter > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nset_column_width\n\nSet the maximum column width for module and function names.\n\nProperties\n\n\n\n\n\nmax_column_width\n\nGet the maximum column length."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/PyAnsysBaseFormatter.html#import-detail","title":"PyAnsysBaseFormatter > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/PyAnsysBaseFormatter.html#property-detail","title":"PyAnsysBaseFormatter > Property detail","text":"Property detail\n\n\n\nproperty PyAnsysBaseFormatter.max_column_width\n\nGet the maximum column length."},{"objectID":"Home","href":"api/ansys/tools/common/logger_formatter/PyAnsysBaseFormatter.html#method-detail","title":"PyAnsysBaseFormatter > Method detail","text":"Method detail\n\n\n\nPyAnsysBaseFormatter.set_column_width(width: int = 15)\n\nSet the maximum column width for module and function names."},{"objectID":"Home","href":"api/ansys/tools/common/report/index.html#the-reportpy-module","title":"The report.py module","text":"The report.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/report/index.html#summary","title":"The report.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nReport\n\nGenerate a scooby.Report instance.\n\nConstants\n\n\n\n\n\n__ANSYS_VARS_PREFIX__\n\n\n\n__PYANSYS_LIBS__\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/report/index.html#description","title":"The report.py module > Description","text":"Description\n\nAnsys report tool.\n\nModule containing the standardized Report class for PyAnsys projects."},{"objectID":"Home","href":"api/ansys/tools/common/report/index.html#module-detail","title":"The report.py module > Module detail","text":"Module detail\n\n\n\nreport.__ANSYS_VARS_PREFIX__ = ('AWP', 'ACP', 'ANS', 'FLUENT', 'MAPDL', 'DPF', 'SIMPLORER', 'SIWAVE', 'CADOE')\n\n\n\n\n\nreport.__PYANSYS_LIBS__ = ('ansys_sphinx_theme', 'ansys.acp.core', 'ansys.dpf.composites', 'ansys.dpf.core',...\n\n"},{"objectID":"Home","href":"user_guide/launcher/index.html#local-product-launcher","title":"Local product launcher","text":"Local product launcher\n\nUse the local product launcher rather than the launch functions implemented by various PyAnsys libraries. These pages provide an overview and describe how to use the local product launcher:\n\nrationale: Provides a high-level overview of the problem that the\nlocal product launcher solves.\n\nref_cli: Describes the command-line interface.\n\nplugin_creation: Describes how to create a launcher plugin to\nextend   the local product launcher for use with another Ansys product.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/ServerType.html#servertype","title":"ServerType","text":"ServerType\n\n\n\nclass ansys.tools.common.launcher.interface.ServerType(*args, **kwds)\n\nBases: enum.Enum\n\nDefines which protocols the server supports.\n\nThe ServerType class is used as values in the LauncherProtocol.SERVER_SPEC\nattribute to define the capabilities of the servers started with a given product and\nlaunch method."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/ServerType.html#overview","title":"ServerType > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nGENERIC\n\nGeneric server, which responds at a given URL and port.\n\nGRPC\n\nServer that can be accessed via gRPC."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/ServerType.html#import-detail","title":"ServerType > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/interface/ServerType.html#attribute-detail","title":"ServerType > Attribute detail","text":"Attribute detail\n\n\n\nServerType.GENERIC\n\nGeneric server, which responds at a given URL and port.\n\nThe generic server type can be used for any server. It does not\ninclude information about which protocol should be used.\n\n\n\nServerType.GRPC\n\nServer that can be accessed via gRPC.\n\nServers of this type are accessible via the ProductInstance.channels\nattribute."},{"objectID":"Home","href":"api/ansys/tools/common/logger/index.html#the-loggerpy-module","title":"The logger.py module","text":"The logger.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/logger/index.html#summary","title":"The logger.py module > Summary","text":"Summary\n\nClasses\n\n\n\n\n\nSingletonType\n\nProvides the singleton helper class for the logger.\n\nLogger\n\nProvides the singleton logger.\n\nConstants\n\n\n\n\n\nLOGGER\n\nGlobal logger instance.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/logger/index.html#description","title":"The logger.py module > Description","text":"Description\n\nProvides the singleton helper class for the logger."},{"objectID":"Home","href":"api/ansys/tools/common/logger/index.html#module-detail","title":"The logger.py module > Module detail","text":"Module detail\n\n\n\nlogger.LOGGER\n\nGlobal logger instance.\n\nThis is a global instance of the Logger class that can be used throughout the application.\nIt is initialized with default settings and can be configured as needed."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionNumber.html#versionnumber","title":"VersionNumber","text":"VersionNumber\n\n\n\nclass ansys.tools.common.versioning.VersionNumber\n\nProvides the class for version comparison.\n\nThis class can be instantiated from a string or an integer.\nThe constructor chooses the corresponding class.\n\nAny combination of dev and integers are considered as a string.\ndev is considered as the highest version number possible."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionNumber.html#examples","title":"VersionNumber > Examples","text":"Examples\n\n>>> from ansys.tools.versioning.utils import VersionNumber\n>>> VersionNumber(1)\n1\n>>> VersionNumber(\"dev\")\n'dev'\n>>> VersionNumber(1) <= VersionNumber(\"dev\")\nTrue\n>>> VersionNumber(99999) >= VersionNumber(\"dev\")\nFalse\n>>> VersionNumber(\"dev\") == VersionNumber(\"dev1\")\nFalse\n>>> VersionNumber(\"dev\") != VersionNumber(\"dev1\")\nTrue"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/VersionNumber.html#import-detail","title":"VersionNumber > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/SemanticVersion.html#semanticversion","title":"SemanticVersion","text":"SemanticVersion\n\n\n\nclass ansys.tools.common.versioning.SemanticVersion\n\nBases: tuple\n\nProvides a class for semantic versioning.\n\nIt is a subclass of a tuple and can be instantiated from a string or a tuple.\n\nYou can use dev in the patch version, but nowhere else."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/SemanticVersion.html#overview","title":"SemanticVersion > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nas_string\n\nVersion as string.\n\nas_tuple\n\nVersion as tuple.\n\nas_list\n\nVersion as list.\n\nas_dict\n\nVersion as dictionary.\n\nProperties\n\n\n\n\n\nmajor\n\nMajor version number.\n\nminor\n\nMinor version number.\n\npatch\n\nPatch version number."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/SemanticVersion.html#import-detail","title":"SemanticVersion > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/versioning/SemanticVersion.html#property-detail","title":"SemanticVersion > Property detail","text":"Property detail\n\n\n\nproperty SemanticVersion.major\n\nMajor version number.\n\n\n\nproperty SemanticVersion.minor\n\nMinor version number.\n\n\n\nproperty SemanticVersion.patch\n\nPatch version number."},{"objectID":"Home","href":"api/ansys/tools/common/versioning/SemanticVersion.html#method-detail","title":"SemanticVersion > Method detail","text":"Method detail\n\n\n\nSemanticVersion.as_string()\n\nVersion as string.\n\n\n\nSemanticVersion.as_tuple()\n\nVersion as tuple.\n\n\n\nSemanticVersion.as_list()\n\nVersion as list.\n\n\n\nSemanticVersion.as_dict()\n\nVersion as dictionary."},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section explains key concepts for implementing the tools in Ansys Common Tools in your PyAnsys workflows. You can use these tools in your examples as well as integrate them into your own code.\n\nAnsys Common Tools only supports the last two major versions of Python. Usage with older versions might not work.\n\nAnsys path tool\n\nLearn how to use the Ansys path tool.\n\nansys_tools_path\n\nAnsys example downloader\n\nLearn how to use the example downloader.\n\nansys_downloader\n\nAnsys exceptions\n\nLearn how to use the common exceptions.\n\nansys_exceptions\n\nAnsys versioning tool\n\nLearn how to use the versioning tool.\n\nversioning\n\nAnsys report tool\n\nLearn how to use the report tool.\n\nreport\n\nAnsys local launcher tool\n\nLearn how to use the local launcher tool.\n\nlauncher/index\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the ansys-tools-common\nproject."},{"objectID":"Release notes","href":"changelog.html#020---october-31-2025","title":"Release notes > 0.2.0 - October 31, 2025","text":"0.2.0 - October 31, 2025\n\nAdded\n\n\n\n\n\nProvide logger formatter separately\n\n#37\n\nFeat: technical review\n\n#39\n\nDependencies\n\n\n\n\n\nCi: bump actions/download-artifact from 4.3.0 to 5.0.0\n\n#54\n\nBuild: bump pytest-cov from 6.1.1 to 7.0.0\n\n#55\n\nBuild: bump sphinx-click from 4.4.0 to 6.1.0\n\n#59\n\nBuild: bump hypothesis from 6.135.10 to 6.140.3\n\n#60\n\nBuild: bump hypothesis from 6.142.1 to 6.142.2\n\n#69\n\nMiscellaneous\n\n\n\n\n\nCi: bump peter-evans/create-or-update-comment from 4.0.0 to 5.0.0\n\n#47\n\nCi: bump actions/labeler from 5.0.0 to 6.0.1\n\n#48\n\nBuild: bump pyfakefs from 5.8.0 to 5.9.3\n\n#49\n\nCi: bump actions/checkout from 4.2.2 to 5.0.0\n\n#50\n\nBuild: bump pytest from 8.4.0 to 8.4.2\n\n#51\n\nChore: grouping grpc dependencies in same dependabot bump\n\n#57\n\nMaint: Add Dependabot automerge action\n\n#61\n\nMaint: Add CI bot to CODEOWNERS\n\n#63\n\nBuild: bump pyfakefs from 5.9.3 to 5.10.0\n\n#64\n\nBuild: bump hypothesis from 6.140.3 to 6.140.4\n\n#65\n\nBuild: bump hypothesis from 6.140.4 to 6.141.1\n\n#66\n\nBuild: bump hypothesis from 6.141.1 to 6.142.1\n\n#67\n\nBuild: bump the grpc-deps group with 2 updates\n\n#68\n\nBuild: bump hypothesis from 6.142.2 to 6.142.3\n\n#71\n\nCi: bump actions/download-artifact from 5.0.0 to 6.0.0\n\n#72\n\nBuild: bump hypothesis from 6.142.3 to 6.142.4\n\n#73\n\nFix: Prepare for public release\n\n#74\n\nMaintenance\n\n\n\n\n\nUpdate CHANGELOG for v0.1.0\n\n#36\n\nAdd ``ansys/actions/check-actions-security`` action and related fixes\n\n#41"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysError.html#ansyserror","title":"AnsysError","text":"AnsysError\n\n\n\nexception ansys.tools.common.exceptions.AnsysError(message: str)\n\nBases: Exception\n\nBase class for all exceptions raised by the Ansys API.\n\nYou can use this base class to catch all Ansys-related exceptions."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysError.html#overview","title":"AnsysError > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nmessage\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysError.html#import-detail","title":"AnsysError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysError.html#attribute-detail","title":"AnsysError > Attribute detail","text":"Attribute detail\n\n\n\nAnsysError.message\n\n"},{"objectID":"Home","href":"index.html#ansys-common-tools-021","title":"Ansys Common Tools 0.2.1","text":"Ansys Common Tools 0.2.1\n\nAnsys Common Tools provides a collection of tools for the PyAnsys ecosystem.\n\nGetting started \n\nLearn how to install Ansys Common Tools in user mode.\n\ngetting_started/index\n\nUser guide \n\nUnderstand key concepts for implementing the tools\nin your workflows.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with the tools.\n\napi/index\n\nContribute \n\nLearn how to contribute to the Ansys Common Tools codebase or documentation.\n\ncontributing\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/index.html#the-exceptionspy-module","title":"The exceptions.py module","text":"The exceptions.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/index.html#summary","title":"The exceptions.py module > Summary","text":"Summary\n\nExceptions\n\n\n\n\n\nAnsysError\n\nBase class for all exceptions raised by the Ansys API.\n\nProductInstanceError\n\nCustom exception for ProductInstance lifecycle errors.\n\nAnsysHostnameValueError\n\nError raised when hostname value is not valid.\n\nAnsysPortValueError\n\nError raised when port value is not valid.\n\nAnsysTypeError\n\nError raised when an argument is of the wrong type.\n\nAnsysLogicError\n\nException raised when an unexpected logical condition occurs.\n\nVersionSyntaxError\n\nAn exception raised when an invalid version syntax is found.\n\nVersionError\n\nAn exception raised when a version is not valid.\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/index.html#description","title":"The exceptions.py module > Description","text":"Description\n\nExceptions module."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#the-configpy-module","title":"The config.py module","text":"The config.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#summary","title":"The config.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_launch_mode_for\n\nGet the default launch mode configured for a product.\n\nget_config_for\n\nGet the configuration object for a given product and launch mode.\n\nis_configured\n\nCheck if a configuration exists for a given product and launch mode.\n\nset_config_for\n\nSet the configuration for a given product and launch mode.\n\nsave_config\n\nSave the configuration to a file on disk."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#description","title":"The config.py module > Description","text":"Description\n\nTools for managing local product launcher configuration.\n\nThe methods in the config class manage the default configuration\nfor launching products. The configuration is loaded from and stored to a\nconfig.json file. By default, this file is located in the user configuration\ndirectory (platform-dependent). Its location can be specified explicitly\nwith the ANSYS_LAUNCHER_CONFIG_PATH environment variable."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#module-detail","title":"The config.py module > Module detail","text":"Module detail\n\n\n\nconfig.get_launch_mode_for(*, product_name: str, launch_mode: str | None = None) -> str\n\nGet the default launch mode configured for a product.\n\n\n\nconfig.get_config_for(*, product_name: str, launch_mode: str | None) -> ansys.tools.common.launcher.interface.DataclassProtocol\n\nGet the configuration object for a given product and launch mode.\n\nGet the default configuration object for the product. If a\nlaunch_mode parameter is given, the configuration for\nthis mode is returned. Otherwise, the configuration for\nthe default launch mode is returned.\n\n\n\nconfig.is_configured(*, product_name: str, launch_mode: str | None = None) -> bool\n\nCheck if a configuration exists for a given product and launch mode.\n\nNote that if only the fallback launcher/configuration is available, this method returns False.\n\n\n\nconfig.set_config_for(*, product_name: str, launch_mode: str, config: ansys.tools.common.launcher.interface.LAUNCHER_CONFIG_T, overwrite_default: bool = False) -> None\n\nSet the configuration for a given product and launch mode.\n\nUpdate the configuration by setting the configuration for the\ngiven product and launch mode.\n\nThis method only updates the in-memory configuration. It\ndoes not store it to a file.\n\n\n\nconfig.save_config() -> None\n\nSave the configuration to a file on disk.\n\nThis method saves the current in-memory configuration to the config.json file."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#parameters","title":"The config.py module > Parameters","text":"Parameters\n\nproduct_name\n\nstr\n\nProduct to retrieve the launch mode for.\n\nlaunch_mode\n\nstr, default: None\n\nLaunch mode to use. The default is None, in which case the default\nlaunch mode is used. If a launch mode is specified, this value is returned."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#returns","title":"The config.py module > Returns","text":"Returns\n\nstr or None\n\nLaunch mode for the product."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#parameters","title":"The config.py module > Parameters","text":"Parameters\n\nproduct_name\n\nstr\n\nProduct to get the configuration for.\n\nlaunch_mode\n\nstr, default: None\n\nLaunch mode for the configuration."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#returns","title":"The config.py module > Returns","text":"Returns\n\nDataclassProtocol\n\nConfiguration object."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#raises","title":"The config.py module > Raises","text":"Raises\n\nKeyError\n\nIf the requested configuration does not exist.\n\nTypeError\n\nIf the configuration type does not match the type specified by\nthe launcher plugin."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#parameters","title":"The config.py module > Parameters","text":"Parameters\n\nproduct_name :str\n\nProduct whose configuration is checked.\n\nlaunch_mode\n\nstr, default: None\n\nLaunch mode whose configuration is checked. The\ndefault is None, in which case the default\nlaunch mode is used."},{"objectID":"Home","href":"api/ansys/tools/common/launcher/config/index.html#parameters","title":"The config.py module > Parameters","text":"Parameters\n\nproduct_name\n\nstr\n\nName of the product whose configuration to update.\n\nlaunch_mode\n\nstr\n\nLaunch mode that the configuration applies to.\n\nconfig\n\nLAUNCHER_CONFIG_T\n\nConfiguration object.\n\noverwrite_default\n\nbool, default: False\n\nWhether to change the default launch mode for the product\nto the value specified for the launch_mode parameter."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#abstractgrpcconnection","title":"AbstractGRPCConnection","text":"AbstractGRPCConnection\n\n\n\nclass ansys.tools.common.abstractions.connection.AbstractGRPCConnection(host: str, port: str)\n\nBases: abc.ABC\n\nAbstract class for managing gRPC connections."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#parameters","title":"AbstractGRPCConnection > Parameters","text":"Parameters\n\nhost\n\nstr\n\nHost where the gRPC server is running.\n\nport\n\nstr\n\nPort where the gRPC server is listening."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#overview","title":"AbstractGRPCConnection > Overview","text":"Overview\n\nAbstract methods\n\n\n\n\n\nconnect\n\nEstablish a connection to the gRPC server.\n\nclose\n\nDisconnect from the gRPC server.\n\nProperties\n\n\n\n\n\nservice\n\nGRPC stub for making requests.\n\nis_closed\n\nFlag indicating if the connection is closed."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#import-detail","title":"AbstractGRPCConnection > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#property-detail","title":"AbstractGRPCConnection > Property detail","text":"Property detail\n\n\n\nabstract property AbstractGRPCConnection.service\n\nGRPC stub for making requests.\n\n\n\nproperty AbstractGRPCConnection.is_closed: bool\n\nFlag indicating if the connection is closed."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#returns","title":"AbstractGRPCConnection > Returns","text":"Returns\n\nbool\n\nTrue if the connection is closed, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/abstractions/connection/AbstractGRPCConnection.html#method-detail","title":"AbstractGRPCConnection > Method detail","text":"Method detail\n\n\n\nabstractmethod AbstractGRPCConnection.connect() -> None\n\nEstablish a connection to the gRPC server.\n\n\n\nabstractmethod AbstractGRPCConnection.close() -> None\n\nDisconnect from the gRPC server."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysTypeError.html#ansystypeerror","title":"AnsysTypeError","text":"AnsysTypeError\n\n\n\nexception ansys.tools.common.exceptions.AnsysTypeError(expected_type: str | type, actual_type: str | type = None)\n\nBases: AnsysError\n\nError raised when an argument is of the wrong type.\n\nThis exception is raised when Python-wise types would work, but internal\nAnsys-specific typing is not right."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysTypeError.html#parameters","title":"AnsysTypeError > Parameters","text":"Parameters\n\nexpected_type\n\nstr | type\n\nExpected type of the argument.\n\nactual_type\n\nstr | type\n\nActual type of the argument."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysTypeError.html#overview","title":"AnsysTypeError > Overview","text":"Overview\n\nAttributes\n\n\n\n\n\nexpected_type\n\n\n\nactual_type\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysTypeError.html#import-detail","title":"AnsysTypeError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/AnsysTypeError.html#attribute-detail","title":"AnsysTypeError > Attribute detail","text":"Attribute detail\n\n\n\nAnsysTypeError.expected_type\n\n\n\n\n\nAnsysTypeError.actual_type = None\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#the-mechanicalpy-module","title":"The mechanical.py module","text":"The mechanical.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#summary","title":"The mechanical.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\nCheck if the executable path is valid for Ansys Mechanical."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#description","title":"The mechanical.py module > Description","text":"Description\n\nMechanical-specific logic for the Ansys path tool."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#module-detail","title":"The mechanical.py module > Module detail","text":"Module detail\n\n\n\nmechanical.is_valid_executable_path(exe_loc: str) -> bool\n\nCheck if the executable path is valid for Ansys Mechanical."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#parameters","title":"The mechanical.py module > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nPath to the executable file."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/mechanical/index.html#returns","title":"The mechanical.py module > Returns","text":"Returns\n\nbool\n\nTrue if the path is valid for Ansys Mechanical, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#downloadmanager","title":"DownloadManager","text":"DownloadManager\n\n\n\nclass ansys.tools.common.example_download.DownloadManager\n\nManages downloads of example files.\n\nManages the download of example from the example-data\nrepository, which is at https://github.com/ansys/example-data."},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#overview","title":"DownloadManager > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nclear_download_cache\n\nRemove downloaded example files from the local path.\n\ndownload_file\n\nDownload an example file from the example-data repository."},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#import-detail","title":"DownloadManager > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#method-detail","title":"DownloadManager > Method detail","text":"Method detail\n\n\n\nDownloadManager.clear_download_cache()\n\nRemove downloaded example files from the local path.\n\n\n\nDownloadManager.download_file(filename: str, directory: str, destination: str | None = None, force: bool = False) -> str\n\nDownload an example file from the example-data repository."},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#parameters","title":"DownloadManager > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the example file to download.\n\ndirectory\n\nstr\n\nPath under the example-data repository.\n\ndestination\n\nstr, default: None\n\nPath to download the example file to. The default\nis None, in which case the default path for app data\nis used.\n\nforce\n\nbool, default: False\n\nWhether to always download the example file. The default is\nFalse, in which case if the example file is cached, it\nis reused."},{"objectID":"Home","href":"api/ansys/tools/common/example_download/DownloadManager.html#returns","title":"DownloadManager > Returns","text":"Returns\n\ntuple[str, str]\n\nTuple containing the filepath to use and the local\nfilepath of the downloaded directory. The two are\ndifferent in case of containers."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#applicationplugin","title":"ApplicationPlugin","text":"ApplicationPlugin\n\n\n\nclass ansys.tools.common.path.applications.ApplicationPlugin\n\nProvides for application plugins."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#overview","title":"ApplicationPlugin > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nis_valid_executable_path\n\nCheck if the executable path is valid for the application."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#import-detail","title":"ApplicationPlugin > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#method-detail","title":"ApplicationPlugin > Method detail","text":"Method detail\n\n\n\nApplicationPlugin.is_valid_executable_path(exe_loc: str) -> bool\n\nCheck if the executable path is valid for the application."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#parameters","title":"ApplicationPlugin > Parameters","text":"Parameters\n\nexe_loc\n\nstr\n\nPath to the executable file."},{"objectID":"Home","href":"api/ansys/tools/common/path/applications/ApplicationPlugin.html#returns","title":"ApplicationPlugin > Returns","text":"Returns\n\nbool\n\nTrue if the path is valid for the application, False otherwise."},{"objectID":"Home","href":"api/ansys/tools/common/path/save/index.html#the-savepy-module","title":"The save.py module","text":"The save.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/common/path/save/index.html#summary","title":"The save.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncli\n\nUse the CLI tool to store the path of an Ansys product."},{"objectID":"Home","href":"api/ansys/tools/common/path/save/index.html#description","title":"The save.py module > Description","text":"Description\n\nConvenience CLI to save the path for an Ansys application in the configuration."},{"objectID":"Home","href":"api/ansys/tools/common/path/save/index.html#module-detail","title":"The save.py module > Module detail","text":"Module detail\n\n\n\nsave.cli(name: str, location: str, allow_prompt: bool)\n\nUse the CLI tool to store the path of an Ansys product.\n\nThis example demonstrates the main use of this tool:"},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/VersionSyntaxError.html#versionsyntaxerror","title":"VersionSyntaxError","text":"VersionSyntaxError\n\n\n\nexception ansys.tools.common.exceptions.VersionSyntaxError(msg)\n\nBases: AnsysError\n\nAn exception raised when an invalid version syntax is found."},{"objectID":"Home","href":"api/ansys/tools/common/exceptions/VersionSyntaxError.html#import-detail","title":"VersionSyntaxError > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/logger/SingletonType.html#singletontype","title":"SingletonType","text":"SingletonType\n\n\n\nclass ansys.tools.common.logger.SingletonType\n\nBases: type\n\nProvides the singleton helper class for the logger."},{"objectID":"Home","href":"api/ansys/tools/common/logger/SingletonType.html#overview","title":"SingletonType > Overview","text":"Overview\n\nSpecial methods\n\n\n\n\n\n__call__\n\nCall to redirect new instances to the singleton instance."},{"objectID":"Home","href":"api/ansys/tools/common/logger/SingletonType.html#import-detail","title":"SingletonType > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/common/logger/SingletonType.html#method-detail","title":"SingletonType > Method detail","text":"Method detail\n\n\n\nSingletonType.__call__(*args, **kwargs)\n\nCall to redirect new instances to the singleton instance."},{"objectID":"Home","href":"user_guide/ansys_downloader.html#ansys-example-downloader","title":"Ansys example downloader","text":"Ansys example downloader\n\nUse the Ansys example downloader to download an example from a PyAnsys library. Import this tool and then specify the filename, directory, and local path for the file to download:"}]